// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type InstanceMemcacheParameters struct {
	/* This is a unique ID associated with this set of parameters. */
	// +optional
	Id *string `json:"id,omitempty"`

	/* User-defined set of parameters to use in the memcache process. */
	// +optional
	Params map[string]string `json:"params,omitempty"`
}

type InstanceNodeConfig struct {
	/* Number of CPUs per node. */
	CpuCount int `json:"cpuCount"`

	/* Memory size in Mebibytes for each memcache node. */
	MemorySizeMb int `json:"memorySizeMb"`
}

type MemcacheInstanceSpec struct {
	/* A user-visible name for the instance. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* Immutable. User-specified parameters for this memcache instance. */
	// +optional
	MemcacheParameters *InstanceMemcacheParameters `json:"memcacheParameters,omitempty"`

	/* The major version of Memcached software. If not provided, latest supported version will be used.
	Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
	determined by our system based on the latest supported minor version. Default value: "MEMCACHE_1_5" Possible values: ["MEMCACHE_1_5"]. */
	// +optional
	MemcacheVersion *string `json:"memcacheVersion,omitempty"`

	/* The full name of the network to connect the instance to. */
	// +optional
	NetworkRef *v1alpha1.ResourceRef `json:"networkRef,omitempty"`

	/* Immutable. Configuration for memcache nodes. */
	NodeConfig InstanceNodeConfig `json:"nodeConfig"`

	/* Number of nodes in the memcache instance. */
	NodeCount int `json:"nodeCount"`

	/* Immutable. The region of the Memcache instance. If it is not provided, the provider region is used. */
	Region string `json:"region"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Immutable. Zones where memcache nodes should be provisioned.  If not
	provided, all zones will be used. */
	// +optional
	Zones []string `json:"zones,omitempty"`
}

type InstanceMemcacheNodesStatus struct {
	/* Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node. */
	Host string `json:"host,omitempty"`

	/* Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name. */
	NodeId string `json:"nodeId,omitempty"`

	/* The port number of the Memcached server on this node. */
	Port int `json:"port,omitempty"`

	/* Current state of the Memcached node. */
	State string `json:"state,omitempty"`

	/* Location (GCP Zone) for the Memcached node. */
	Zone string `json:"zone,omitempty"`
}

type MemcacheInstanceStatus struct {
	/* Conditions represent the latest available observations of the
	   MemcacheInstance's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Creation timestamp in RFC3339 text format. */
	CreateTime string `json:"createTime,omitempty"`
	/* Endpoint for Discovery API. */
	DiscoveryEndpoint string `json:"discoveryEndpoint,omitempty"`
	/* The full version of memcached server running on this instance. */
	MemcacheFullVersion string `json:"memcacheFullVersion,omitempty"`
	/* Additional information about the instance state, if available. */
	MemcacheNodes []InstanceMemcacheNodesStatus `json:"memcacheNodes,omitempty"`
	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	ObservedGeneration int `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// MemcacheInstance is the Schema for the memcache API
// +k8s:openapi-gen=true
type MemcacheInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   MemcacheInstanceSpec   `json:"spec,omitempty"`
	Status MemcacheInstanceStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// MemcacheInstanceList contains a list of MemcacheInstance
type MemcacheInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MemcacheInstance `json:"items"`
}

func init() {
	SchemeBuilder.Register(&MemcacheInstance{}, &MemcacheInstanceList{})
}
