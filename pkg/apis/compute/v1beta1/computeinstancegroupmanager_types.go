// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type InstancegroupmanagerAutoHealingPolicies struct {
	/*  */
	// +optional
	HealthCheckRef *v1alpha1.ResourceRef `json:"healthCheckRef,omitempty"`

	/* The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. */
	// +optional
	InitialDelaySec *int `json:"initialDelaySec,omitempty"`
}

type InstancegroupmanagerDistributionPolicy struct {
	/* Zones where the regional managed instance group will create and manage instances. */
	// +optional
	Zones []InstancegroupmanagerZones `json:"zones,omitempty"`
}

type InstancegroupmanagerMaxSurge struct {
	/* Specifies a fixed number of VM instances. This must be a positive integer. */
	// +optional
	Fixed *int `json:"fixed,omitempty"`

	/* Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%. */
	// +optional
	Percent *int `json:"percent,omitempty"`
}

type InstancegroupmanagerMaxUnavailable struct {
	/* Specifies a fixed number of VM instances. This must be a positive integer. */
	// +optional
	Fixed *int `json:"fixed,omitempty"`

	/* Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%. */
	// +optional
	Percent *int `json:"percent,omitempty"`
}

type InstancegroupmanagerNamedPorts struct {
	/* The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.  */
	// +optional
	Name *string `json:"name,omitempty"`

	/* The port number, which can be a value between 1 and 65535. */
	// +optional
	Port *int `json:"port,omitempty"`
}

type InstancegroupmanagerTargetSize struct {
	/* Absolute value of VM instances calculated based on the specific mode. */
	// +optional
	Calculated *int `json:"calculated,omitempty"`

	/* Specifies a fixed number of VM instances. This must be a positive integer. */
	// +optional
	Fixed *int `json:"fixed,omitempty"`

	/* Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%. */
	// +optional
	Percent *int `json:"percent,omitempty"`
}

type InstancegroupmanagerUpdatePolicy struct {
	/* The instance redistribution policy for regional managed instance groups. Possible values: PROACTIVE, NONE */
	// +optional
	InstanceRedistributionType *string `json:"instanceRedistributionType,omitempty"`

	/* The maximum number of instances that can be created above the specified targetSize during the update process */
	// +optional
	MaxSurge *InstancegroupmanagerMaxSurge `json:"maxSurge,omitempty"`

	/* The maximum number of instances that can be unavailable during the update process */
	// +optional
	MaxUnavailable *InstancegroupmanagerMaxUnavailable `json:"maxUnavailable,omitempty"`

	/* Minimal action to be taken on an instance. Possible values: RESTART, REPLACE */
	// +optional
	MinimalAction *string `json:"minimalAction,omitempty"`
}

type InstancegroupmanagerVersions struct {
	/*  */
	// +optional
	InstanceTemplateRef *v1alpha1.ResourceRef `json:"instanceTemplateRef,omitempty"`

	/* Name of the version. Unique among all versions in the scope of this managed instance group. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* Specifies the intended number of instances to be created from the instanceTemplate. */
	// +optional
	TargetSize *InstancegroupmanagerTargetSize `json:"targetSize,omitempty"`
}

type InstancegroupmanagerZones struct {
	/* The URL of the zone. The zone must exist in the region where the managed instance group is located. */
	// +optional
	Zone *string `json:"zone,omitempty"`
}

type ComputeInstanceGroupManagerSpec struct {
	/* The autohealing policy for this managed instance group. */
	// +optional
	AutoHealingPolicies []InstancegroupmanagerAutoHealingPolicies `json:"autoHealingPolicies,omitempty"`

	/* The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.  */
	BaseInstanceName string `json:"baseInstanceName"`

	/* An optional description of this resource. Provide this property when you create the resource.  */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Policy specifying intended distribution of instances in regional managed instance group. */
	// +optional
	DistributionPolicy *InstancegroupmanagerDistributionPolicy `json:"distributionPolicy,omitempty"`

	/*  */
	// +optional
	InstanceTemplateRef *v1alpha1.ResourceRef `json:"instanceTemplateRef,omitempty"`

	/* The location of this resource. */
	// +optional
	Location *string `json:"location,omitempty"`

	/* Named ports configured for the Instance Groups complementary to this Instance Group Manager. */
	// +optional
	NamedPorts []InstancegroupmanagerNamedPorts `json:"namedPorts,omitempty"`

	/* The Project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/*  */
	// +optional
	TargetPools []v1alpha1.ResourceRef `json:"targetPools,omitempty"`

	/* The target number of running instances for this managed instance group. Deleting or abandoning instances reduces this number. Resizing the group changes this number.  */
	// +optional
	TargetSize *int `json:"targetSize,omitempty"`

	/* The update policy for this managed instance group. */
	// +optional
	UpdatePolicy *InstancegroupmanagerUpdatePolicy `json:"updatePolicy,omitempty"`

	/* Specifies the instance templates used by this managed instance group to create instances. */
	// +optional
	Versions []InstancegroupmanagerVersions `json:"versions,omitempty"`
}

type InstancegroupmanagerCurrentActionsStatus struct {
	/* The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.  */
	Abandoning int `json:"abandoning,omitempty"`

	/* The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully.  If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.  */
	Creating int `json:"creating,omitempty"`

	/* The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly.  */
	CreatingWithoutRetries int `json:"creatingWithoutRetries,omitempty"`

	/* The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.  */
	Deleting int `json:"deleting,omitempty"`

	/* The number of instances in the managed instance group that are running and have no scheduled actions.  */
	None int `json:"none,omitempty"`

	/* The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.  */
	Recreating int `json:"recreating,omitempty"`

	/* The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.  */
	Refreshing int `json:"refreshing,omitempty"`

	/* The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.  */
	Restarting int `json:"restarting,omitempty"`
}

type InstancegroupmanagerMaxSurgeStatus struct {
	/* Absolute value of VM instances calculated based on the specific mode. */
	Calculated int `json:"calculated,omitempty"`
}

type InstancegroupmanagerMaxUnavailableStatus struct {
	/* Absolute value of VM instances calculated based on the specific mode. */
	Calculated int `json:"calculated,omitempty"`
}

type InstancegroupmanagerStatusStatus struct {
	/* The autoscalar that targets this instance group manager */
	Autoscalar string `json:"autoscalar,omitempty"`

	/* A bit indicating whether the managed instance group is in a stable state. */
	IsStable bool `json:"isStable,omitempty"`

	/* A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager. */
	VersionTarget InstancegroupmanagerVersionTargetStatus `json:"versionTarget,omitempty"`
}

type InstancegroupmanagerUpdatePolicyStatus struct {
	/*  */
	MaxSurge InstancegroupmanagerMaxSurgeStatus `json:"maxSurge,omitempty"`

	/*  */
	MaxUnavailable InstancegroupmanagerMaxUnavailableStatus `json:"maxUnavailable,omitempty"`
}

type InstancegroupmanagerVersionTargetStatus struct {
	/* A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager. */
	IsReached bool `json:"isReached,omitempty"`
}

type ComputeInstanceGroupManagerStatus struct {
	/* Conditions represent the latest available observations of the
	   ComputeInstanceGroupManager's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The creation timestamp for this managed instance group in RFC3339 text format.  */
	CreationTimestamp string `json:"creationTimestamp,omitempty"`
	/* The list of instance actions and the number of instances in this managed instance group that are scheduled for each of those actions.  */
	CurrentActions InstancegroupmanagerCurrentActionsStatus `json:"currentActions,omitempty"`
	/* A unique identifier for this resource */
	Id int `json:"id,omitempty"`
	/* The instance group being managed */
	InstanceGroup string `json:"instanceGroup,omitempty"`
	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	ObservedGeneration int `json:"observedGeneration,omitempty"`
	/* The region the managed instance group resides in */
	Region string `json:"region,omitempty"`
	/* The status of this managed instance group. */
	Status InstancegroupmanagerStatusStatus `json:"status,omitempty"`
	/*  */
	UpdatePolicy InstancegroupmanagerUpdatePolicyStatus `json:"updatePolicy,omitempty"`
	/* The zone the managed instance group resides. */
	Zone string `json:"zone,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeInstanceGroupManager is the Schema for the compute API
// +k8s:openapi-gen=true
type ComputeInstanceGroupManager struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ComputeInstanceGroupManagerSpec   `json:"spec,omitempty"`
	Status ComputeInstanceGroupManagerStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeInstanceGroupManagerList contains a list of ComputeInstanceGroupManager
type ComputeInstanceGroupManagerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ComputeInstanceGroupManager `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ComputeInstanceGroupManager{}, &ComputeInstanceGroupManagerList{})
}
