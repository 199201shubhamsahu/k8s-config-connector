// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type ComputeNetworkPeeringSpec struct {
	/* Whether to export the custom routes to the peer network. Defaults to false. */
	ExportCustomRoutes bool `json:"exportCustomRoutes,omitempty"`
	/* Immutable. */
	ExportSubnetRoutesWithPublicIp bool `json:"exportSubnetRoutesWithPublicIp,omitempty"`
	/* Whether to export the custom routes from the peer network. Defaults to false. */
	ImportCustomRoutes bool `json:"importCustomRoutes,omitempty"`
	/* Immutable. */
	ImportSubnetRoutesWithPublicIp bool `json:"importSubnetRoutesWithPublicIp,omitempty"`
	/*  */
	NetworkRef v1alpha1.ResourceRef `json:"networkRef,omitempty"`
	/*  */
	PeerNetworkRef v1alpha1.ResourceRef `json:"peerNetworkRef,omitempty"`
	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
}

type ComputeNetworkPeeringStatus struct {
	/* Conditions represent the latest available observations of the
	   ComputeNetworkPeering's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* State for the peering, either ACTIVE or INACTIVE. The peering is ACTIVE when there's a matching configuration in the peer network. */
	State string `json:"state,omitempty"`
	/* Details about the current state of the peering. */
	StateDetails string `json:"stateDetails,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeNetworkPeering is the Schema for the compute API
// +k8s:openapi-gen=true
type ComputeNetworkPeering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ComputeNetworkPeeringSpec   `json:"spec,omitempty"`
	Status ComputeNetworkPeeringStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeNetworkPeeringList contains a list of ComputeNetworkPeering
type ComputeNetworkPeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ComputeNetworkPeering `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ComputeNetworkPeering{}, &ComputeNetworkPeeringList{})
}
