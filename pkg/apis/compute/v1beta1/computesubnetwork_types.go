// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type SubnetworkLogConfig struct {
	/* Can only be specified if VPC flow logging for this subnetwork is enabled.
	Toggles the aggregation interval for collecting flow logs. Increasing the
	interval time will reduce the amount of generated flow logs for long
	lasting connections. Default is an interval of 5 seconds per connection. Default value: "INTERVAL_5_SEC" Possible values: ["INTERVAL_5_SEC", "INTERVAL_30_SEC", "INTERVAL_1_MIN", "INTERVAL_5_MIN", "INTERVAL_10_MIN", "INTERVAL_15_MIN"] */
	AggregationInterval string `json:"aggregationInterval,omitempty"`
	/* Export filter used to define which VPC flow logs should be logged, as as CEL expression. See
	https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.
	The default value is 'true', which evaluates to include everything. */
	FilterExpr string `json:"filterExpr,omitempty"`
	/* Can only be specified if VPC flow logging for this subnetwork is enabled.
	The value of the field must be in [0, 1]. Set the sampling rate of VPC
	flow logs within the subnetwork where 1.0 means all collected logs are
	reported and 0.0 means no logs are reported. Default is 0.5 which means
	half of all collected logs are reported. */
	FlowSampling float64 `json:"flowSampling,omitempty"`
	/* Can only be specified if VPC flow logging for this subnetwork is enabled.
	Configures whether metadata fields should be added to the reported VPC
	flow logs. Default value: "INCLUDE_ALL_METADATA" Possible values: ["EXCLUDE_ALL_METADATA", "INCLUDE_ALL_METADATA", "CUSTOM_METADATA"] */
	Metadata string `json:"metadata,omitempty"`
	/* List of metadata fields that should be added to reported logs.
	Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" is set to CUSTOM_METADATA. */
	MetadataFields []string `json:"metadataFields,omitempty"`
}

type SubnetworkSecondaryIpRange struct {
	/* The range of IP addresses belonging to this subnetwork secondary
	range. Provide this property when you create the subnetwork.
	Ranges must be unique and non-overlapping with all primary and
	secondary IP ranges within a network. Only IPv4 is supported. */
	IpCidrRange string `json:"ipCidrRange,omitempty"`
	/* The name associated with this subnetwork secondary range, used
	when adding an alias IP range to a VM instance. The name must
	be 1-63 characters long, and comply with RFC1035. The name
	must be unique within the subnetwork. */
	RangeName string `json:"rangeName,omitempty"`
}

type ComputeSubnetworkSpec struct {
	/* Immutable. An optional description of this resource. Provide this property when
	you create the resource. This field can be set only at resource
	creation time. */
	Description string `json:"description,omitempty"`
	/* The range of internal addresses that are owned by this subnetwork.
	Provide this property when you create the subnetwork. For example,
	10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
	non-overlapping within a network. Only IPv4 is supported. */
	IpCidrRange string `json:"ipCidrRange,omitempty"`
	/* Denotes the logging options for the subnetwork flow logs. If logging is enabled
	logs will be exported to Stackdriver. This field cannot be set if the 'purpose' of this
	subnetwork is 'INTERNAL_HTTPS_LOAD_BALANCER' */
	LogConfig SubnetworkLogConfig `json:"logConfig,omitempty"`
	/* The network this subnet belongs to. Only networks that are in the
	distributed mode can have subnetworks. */
	NetworkRef v1alpha1.ResourceRef `json:"networkRef,omitempty"`
	/* When enabled, VMs in this subnetwork without external IP addresses can
	access Google APIs and services by using Private Google Access. */
	PrivateIpGoogleAccess bool `json:"privateIpGoogleAccess,omitempty"`
	/* The private IPv6 google access type for the VMs in this subnet. */
	PrivateIpv6GoogleAccess string `json:"privateIpv6GoogleAccess,omitempty"`
	/* Immutable. The purpose of the resource. This field can be either PRIVATE
	or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to
	INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is
	reserved for Internal HTTP(S) Load Balancing. If unspecified, the
	purpose defaults to PRIVATE.

	If set to INTERNAL_HTTPS_LOAD_BALANCER you must also set 'role'. */
	Purpose string `json:"purpose,omitempty"`
	/* Immutable. The GCP region for this subnetwork. */
	Region string `json:"region,omitempty"`
	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
	/* The role of subnetwork. Currently, this field is only used when
	purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE
	or BACKUP. An ACTIVE subnetwork is one that is currently being used
	for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that
	is ready to be promoted to ACTIVE or is currently draining. Possible values: ["ACTIVE", "BACKUP"] */
	Role string `json:"role,omitempty"`
	/*  */
	SecondaryIpRange []SubnetworkSecondaryIpRange `json:"secondaryIpRange,omitempty"`
}

type ComputeSubnetworkStatus struct {
	/* Conditions represent the latest available observations of the
	   ComputeSubnetwork's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Creation timestamp in RFC3339 text format. */
	CreationTimestamp string `json:"creationTimestamp,omitempty"`
	/* DEPRECATED â€” This field is not useful for users, and has been removed as an output. Fingerprint of this resource. This field is used internally during updates of this resource. */
	Fingerprint string `json:"fingerprint,omitempty"`
	/* The gateway address for default routes to reach destination addresses
	outside this subnetwork. */
	GatewayAddress string `json:"gatewayAddress,omitempty"`
	/*  */
	SelfLink string `json:"selfLink,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeSubnetwork is the Schema for the compute API
// +k8s:openapi-gen=true
type ComputeSubnetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ComputeSubnetworkSpec   `json:"spec,omitempty"`
	Status ComputeSubnetworkStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeSubnetworkList contains a list of ComputeSubnetwork
type ComputeSubnetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ComputeSubnetwork `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ComputeSubnetwork{}, &ComputeSubnetworkList{})
}
