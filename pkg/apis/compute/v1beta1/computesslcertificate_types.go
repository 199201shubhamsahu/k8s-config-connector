// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Certificate struct {
	/* Value of the field. Cannot be used if 'valueFrom' is specified. */
	Value string `json:"value,omitempty"`
	/* Source for the field's value. Cannot be used if 'value' is specified. */
	ValueFrom ComputesslcertificateValueFrom `json:"valueFrom,omitempty"`
}

type ComputesslcertificateValueFrom struct {
	/* Reference to a value with the given key in the given Secret in the resource's namespace. */
	SecretKeyRef v1alpha1.ResourceRef `json:"secretKeyRef,omitempty"`
}

type PrivateKey struct {
	/* Value of the field. Cannot be used if 'valueFrom' is specified. */
	Value string `json:"value,omitempty"`
	/* Source for the field's value. Cannot be used if 'value' is specified. */
	ValueFrom ComputesslcertificateValueFrom `json:"valueFrom,omitempty"`
}

type ComputeSSLCertificateSpec struct {
	/* Immutable. The certificate in PEM format.
	The certificate chain must be no greater than 5 certs long.
	The chain must include at least one intermediate cert. */
	Certificate Certificate `json:"certificate,omitempty"`
	/* Immutable. An optional description of this resource. */
	Description string `json:"description,omitempty"`
	/* Location represents the geographical location of the ComputeSSLCertificate. Specify "global" for global resources. */
	Location string `json:"location,omitempty"`
	/* Immutable. The write-only private key in PEM format. */
	PrivateKey PrivateKey `json:"privateKey,omitempty"`
	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
}

type ComputeSSLCertificateStatus struct {
	/* Conditions represents the latest available observations of the
	   ComputeSSLCertificate's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The unique identifier for the resource. */
	CertificateId int `json:"certificateId,omitempty"`
	/* Creation timestamp in RFC3339 text format. */
	CreationTimestamp string `json:"creationTimestamp,omitempty"`
	/*  */
	SelfLink string `json:"selfLink,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeSSLCertificate is the Schema for the compute API
// +k8s:openapi-gen=true
type ComputeSSLCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ComputeSSLCertificateSpec   `json:"spec,omitempty"`
	Status ComputeSSLCertificateStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeSSLCertificateList contains a list of ComputeSSLCertificate
type ComputeSSLCertificateList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []ComputeSSLCertificate `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ComputeSSLCertificate{}, &ComputeSSLCertificateList{})
}
