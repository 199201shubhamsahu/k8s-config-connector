// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Abort struct {
	/* The HTTP status code used to abort the request. The value must be between 200
	and 599 inclusive. */
	HttpStatus int `json:"httpStatus,omitempty"`
	/* The percentage of traffic (connections/operations/requests) which will be
	aborted as part of fault injection. The value must be between 0.0 and 100.0
	inclusive. */
	Percentage float64 `json:"percentage,omitempty"`
}

type CorsPolicy struct {
	/* In response to a preflight request, setting this to true indicates that the
	actual request can include user credentials. This translates to the Access-
	Control-Allow-Credentials header. Defaults to false. */
	AllowCredentials bool `json:"allowCredentials,omitempty"`
	/* Specifies the content for the Access-Control-Allow-Headers header. */
	AllowHeaders []string `json:"allowHeaders,omitempty"`
	/* Specifies the content for the Access-Control-Allow-Methods header. */
	AllowMethods []string `json:"allowMethods,omitempty"`
	/* Specifies the regular expression patterns that match allowed origins. For
	regular expression grammar please see en.cppreference.com/w/cpp/regex/ecmascript
	An origin is allowed if it matches either allow_origins or allow_origin_regex. */
	AllowOriginRegexes []string `json:"allowOriginRegexes,omitempty"`
	/* Specifies the list of origins that will be allowed to do CORS requests. An
	origin is allowed if it matches either allow_origins or allow_origin_regex. */
	AllowOrigins []string `json:"allowOrigins,omitempty"`
	/* If true, specifies the CORS policy is disabled.
	which indicates that the CORS policy is in effect. Defaults to false. */
	Disabled bool `json:"disabled,omitempty"`
	/* Specifies the content for the Access-Control-Expose-Headers header. */
	ExposeHeaders []string `json:"exposeHeaders,omitempty"`
	/* Specifies how long the results of a preflight request can be cached. This
	translates to the content for the Access-Control-Max-Age header. */
	MaxAge int `json:"maxAge,omitempty"`
}

type DefaultRouteAction struct {
	/* The specification for allowing client side cross-origin requests. Please see
	[W3C Recommendation for Cross Origin Resource Sharing](https://www.w3.org/TR/cors/) */
	CorsPolicy CorsPolicy `json:"corsPolicy,omitempty"`
	/* The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure.
	As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a
	percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted
	by the Loadbalancer for a percentage of requests.

	timeout and retryPolicy will be ignored by clients that are configured with a faultInjectionPolicy. */
	FaultInjectionPolicy FaultInjectionPolicy `json:"faultInjectionPolicy,omitempty"`
	/* Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service.
	Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service,
	the host / authority header is suffixed with -shadow. */
	RequestMirrorPolicy RequestMirrorPolicy `json:"requestMirrorPolicy,omitempty"`
	/* Specifies the retry policy associated with this route. */
	RetryPolicy RetryPolicy `json:"retryPolicy,omitempty"`
	/* Specifies the timeout for the selected route. Timeout is computed from the time the request has been
	fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries.

	If not specified, will use the largest timeout among all backend services associated with the route. */
	Timeout Timeout `json:"timeout,omitempty"`
	/* The spec to modify the URL of the request, prior to forwarding the request to the matched service. */
	UrlRewrite UrlRewrite `json:"urlRewrite,omitempty"`
	/* A list of weighted backend services to send traffic to when a route match occurs.
	The weights determine the fraction of traffic that flows to their corresponding backend service.
	If all traffic needs to go to a single backend service, there must be one weightedBackendService
	with weight set to a non 0 number.

	Once a backendService is identified and before forwarding the request to the backend service,
	advanced routing actions like Url rewrites and header transformations are applied depending on
	additional settings specified in this HttpRouteAction. */
	WeightedBackendServices []WeightedBackendServices `json:"weightedBackendServices,omitempty"`
}

type DefaultService struct {
	/*  */
	BackendBucketRef v1alpha1.ResourceRef `json:"backendBucketRef,omitempty"`
	/*  */
	BackendServiceRef v1alpha1.ResourceRef `json:"backendServiceRef,omitempty"`
}

type DefaultUrlRedirect struct {
	/* The host that will be used in the redirect response instead of the one that was
	supplied in the request. The value must be between 1 and 255 characters. */
	HostRedirect string `json:"hostRedirect,omitempty"`
	/* If set to true, the URL scheme in the redirected request is set to https. If set to
	false, the URL scheme of the redirected request will remain the same as that of the
	request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this
	true for TargetHttpsProxy is not permitted. The default is set to false. */
	HttpsRedirect bool `json:"httpsRedirect,omitempty"`
	/* The path that will be used in the redirect response instead of the one that was
	supplied in the request. pathRedirect cannot be supplied together with
	prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the
	original request will be used for the redirect. The value must be between 1 and 1024
	characters. */
	PathRedirect string `json:"pathRedirect,omitempty"`
	/* The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	retaining the remaining portion of the URL before redirecting the request.
	prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or
	neither. If neither is supplied, the path of the original request will be used for
	the redirect. The value must be between 1 and 1024 characters. */
	PrefixRedirect string `json:"prefixRedirect,omitempty"`
	/* The HTTP Status code to use for this RedirectAction. Supported values are:

	* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.

	* FOUND, which corresponds to 302.

	* SEE_OTHER which corresponds to 303.

	* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method
	will be retained.

	* PERMANENT_REDIRECT, which corresponds to 308. In this case,
	the request method will be retained. Possible values: ["FOUND", "MOVED_PERMANENTLY_DEFAULT", "PERMANENT_REDIRECT", "SEE_OTHER", "TEMPORARY_REDIRECT"] */
	RedirectResponseCode string `json:"redirectResponseCode,omitempty"`
	/* If set to true, any accompanying query portion of the original URL is removed prior
	to redirecting the request. If set to false, the query portion of the original URL is
	retained.
	 This field is required to ensure an empty block is not set. The normal default value is false. */
	StripQuery bool `json:"stripQuery,omitempty"`
}

type Delay struct {
	/* Specifies the value of the fixed delay interval. */
	FixedDelay FixedDelay `json:"fixedDelay,omitempty"`
	/* The percentage of traffic (connections/operations/requests) on which delay will
	be introduced as part of fault injection. The value must be between 0.0 and
	100.0 inclusive. */
	Percentage float64 `json:"percentage,omitempty"`
}

type FaultInjectionPolicy struct {
	/* The specification for how client requests are aborted as part of fault
	injection. */
	Abort Abort `json:"abort,omitempty"`
	/* The specification for how client requests are delayed as part of fault
	injection, before being sent to a backend service. */
	Delay Delay `json:"delay,omitempty"`
}

type FilterLabels struct {
	/* Name of metadata label. The name can have a maximum length of 1024 characters
	and must be at least 1 character long. */
	Name string `json:"name,omitempty"`
	/* The value of the label must match the specified value. value can have a maximum
	length of 1024 characters. */
	Value string `json:"value,omitempty"`
}

type FixedDelay struct {
	/* Span of time that's a fraction of a second at nanosecond resolution. Durations
	less than one second are represented with a 0 'seconds' field and a positive
	'nanos' field. Must be from 0 to 999,999,999 inclusive. */
	Nanos int `json:"nanos,omitempty"`
	/* Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	inclusive. */
	Seconds string `json:"seconds,omitempty"`
}

type HeaderAction struct {
	/* Headers to add to a matching request prior to forwarding the request to the
	backendService. */
	RequestHeadersToAdd []RequestHeadersToAdd `json:"requestHeadersToAdd,omitempty"`
	/* A list of header names for headers that need to be removed from the request
	prior to forwarding the request to the backendService. */
	RequestHeadersToRemove []string `json:"requestHeadersToRemove,omitempty"`
	/* Headers to add the response prior to sending the response back to the client. */
	ResponseHeadersToAdd []ResponseHeadersToAdd `json:"responseHeadersToAdd,omitempty"`
	/* A list of header names for headers that need to be removed from the response
	prior to sending the response back to the client. */
	ResponseHeadersToRemove []string `json:"responseHeadersToRemove,omitempty"`
}

type HeaderMatches struct {
	/* The value should exactly match contents of exactMatch. Only one of exactMatch,
	prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
	ExactMatch string `json:"exactMatch,omitempty"`
	/* The name of the HTTP header to match. For matching against the HTTP request's
	authority, use a headerMatch with the header name ":authority". For matching a
	request's method, use the headerName ":method". */
	HeaderName string `json:"headerName,omitempty"`
	/* If set to false, the headerMatch is considered a match if the match criteria
	above are met. If set to true, the headerMatch is considered a match if the
	match criteria above are NOT met. Defaults to false. */
	InvertMatch bool `json:"invertMatch,omitempty"`
	/* The value of the header must start with the contents of prefixMatch. Only one of
	exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	must be set. */
	PrefixMatch string `json:"prefixMatch,omitempty"`
	/* A header with the contents of headerName must exist. The match takes place
	whether or not the request's header has a value or not. Only one of exactMatch,
	prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
	PresentMatch bool `json:"presentMatch,omitempty"`
	/* The header value must be an integer and its value must be in the range specified
	in rangeMatch. If the header does not contain an integer, number or is empty,
	the match fails. For example for a range [-5, 0]   - -3 will match.  - 0 will
	not match.  - 0.25 will not match.  - -3someString will not match.   Only one of
	exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	must be set. */
	RangeMatch RangeMatch `json:"rangeMatch,omitempty"`
	/* The value of the header must match the regular expression specified in
	regexMatch. For regular expression grammar, please see:
	en.cppreference.com/w/cpp/regex/ecmascript  For matching against a port
	specified in the HTTP request, use a headerMatch with headerName set to PORT and
	a regular expression that satisfies the RFC2616 Host header's port specifier.
	Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or
	rangeMatch must be set. */
	RegexMatch string `json:"regexMatch,omitempty"`
	/* The value of the header must end with the contents of suffixMatch. Only one of
	exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch
	must be set. */
	SuffixMatch string `json:"suffixMatch,omitempty"`
}

type HostRule struct {
	/* An optional description of this resource. Provide this property when you create
	the resource. */
	Description string `json:"description,omitempty"`
	/* The list of host patterns to match. They must be valid hostnames, except * will
	match any string of ([a-z0-9-.]*). In that case, * must be the first character
	and must be followed in the pattern by either - or .. */
	Hosts []string `json:"hosts,omitempty"`
	/* The name of the PathMatcher to use to match the path portion of the URL if the
	hostRule matches the URL's host portion. */
	PathMatcher string `json:"pathMatcher,omitempty"`
}

type MatchRules struct {
	/* For satisfying the matchRule condition, the path of the request must exactly
	match the value specified in fullPathMatch after removing any query parameters
	and anchor that may be part of the original URL. FullPathMatch must be between 1
	and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must
	be specified. */
	FullPathMatch string `json:"fullPathMatch,omitempty"`
	/* Specifies a list of header match criteria, all of which must match corresponding
	headers in the request. */
	HeaderMatches []HeaderMatches `json:"headerMatches,omitempty"`
	/* Specifies that prefixMatch and fullPathMatch matches are case sensitive.
	Defaults to false. */
	IgnoreCase bool `json:"ignoreCase,omitempty"`
	/* Opaque filter criteria used by Loadbalancer to restrict routing configuration to
	a limited set xDS compliant clients. In their xDS requests to Loadbalancer, xDS
	clients present node metadata. If a match takes place, the relevant routing
	configuration is made available to those proxies. For each metadataFilter in
	this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the
	filterLabels must match the corresponding label provided in the metadata. If its
	filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match
	with corresponding labels in the provided metadata. metadataFilters specified
	here can be overrides those specified in ForwardingRule that refers to this
	UrlMap. metadataFilters only applies to Loadbalancers that have their
	loadBalancingScheme set to INTERNAL_SELF_MANAGED. */
	MetadataFilters []MetadataFilters `json:"metadataFilters,omitempty"`
	/* For satisfying the matchRule condition, the request's path must begin with the
	specified prefixMatch. prefixMatch must begin with a /. The value must be
	between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or
	regexMatch must be specified. */
	PrefixMatch string `json:"prefixMatch,omitempty"`
	/* Specifies a list of query parameter match criteria, all of which must match
	corresponding query parameters in the request. */
	QueryParameterMatches []QueryParameterMatches `json:"queryParameterMatches,omitempty"`
	/* For satisfying the matchRule condition, the path of the request must satisfy the
	regular expression specified in regexMatch after removing any query parameters
	and anchor supplied with the original URL. For regular expression grammar please
	see en.cppreference.com/w/cpp/regex/ecmascript  Only one of prefixMatch,
	fullPathMatch or regexMatch must be specified. */
	RegexMatch string `json:"regexMatch,omitempty"`
}

type MetadataFilters struct {
	/* The list of label value pairs that must match labels in the provided metadata
	based on filterMatchCriteria  This list must not be empty and can have at the
	most 64 entries. */
	FilterLabels []FilterLabels `json:"filterLabels,omitempty"`
	/* Specifies how individual filterLabel matches within the list of filterLabels
	contribute towards the overall metadataFilter match. Supported values are:
	  - MATCH_ANY: At least one of the filterLabels must have a matching label in the
	provided metadata.
	  - MATCH_ALL: All filterLabels must have matching labels in
	the provided metadata. Possible values: ["MATCH_ALL", "MATCH_ANY"] */
	FilterMatchCriteria string `json:"filterMatchCriteria,omitempty"`
}

type PathMatcher struct {
	/* defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs
	advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request
	to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set.
	Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.

	Only one of defaultRouteAction or defaultUrlRedirect must be set. */
	DefaultRouteAction DefaultRouteAction `json:"defaultRouteAction,omitempty"`
	/* The backend service or backend bucket to use when none of the given
	paths match. */
	DefaultService DefaultService `json:"defaultService,omitempty"`
	/* When none of the specified hostRules match, the request is redirected to a URL specified
	by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	defaultRouteAction must not be set. */
	DefaultUrlRedirect DefaultUrlRedirect `json:"defaultUrlRedirect,omitempty"`
	/* An optional description of this resource. Provide this property when you create
	the resource. */
	Description string `json:"description,omitempty"`
	/* Specifies changes to request and response headers that need to take effect for
	the selected backendService. HeaderAction specified here are applied after the
	matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap */
	HeaderAction HeaderAction `json:"headerAction,omitempty"`
	/* The name to which this PathMatcher is referred by the HostRule. */
	Name string `json:"name,omitempty"`
	/* The list of path rules. Use this list instead of routeRules when routing based
	on simple path matching is all that's required. The order by which path rules
	are specified does not matter. Matches are always done on the longest-path-first
	basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/*
	irrespective of the order in which those paths appear in this list. Within a
	given pathMatcher, only one of pathRules or routeRules must be set. */
	PathRule []PathRule `json:"pathRule,omitempty"`
	/* The list of ordered HTTP route rules. Use this list instead of pathRules when
	advanced route matching and routing actions are desired. The order of specifying
	routeRules matters: the first rule that matches will cause its specified routing
	action to take effect. Within a given pathMatcher, only one of pathRules or
	routeRules must be set. routeRules are not supported in UrlMaps intended for
	External load balancers. */
	RouteRules []RouteRules `json:"routeRules,omitempty"`
}

type PathRule struct {
	/* The list of path patterns to match. Each must start with / and the only place a
	* is allowed is at the end following a /. The string fed to the path matcher
	does not include any text after the first ? or #, and those chars are not
	allowed here. */
	Paths []string `json:"paths,omitempty"`
	/* In response to a matching path, the load balancer performs advanced routing
	actions like URL rewrites, header transformations, etc. prior to forwarding the
	request to the selected backend. If routeAction specifies any
	weightedBackendServices, service must not be set. Conversely if service is set,
	routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	or urlRedirect must be set. */
	RouteAction RouteAction `json:"routeAction,omitempty"`
	/* The backend service or backend bucket to use if any of the given
	paths match. */
	Service Service `json:"service,omitempty"`
	/* When a path pattern is matched, the request is redirected to a URL specified
	by urlRedirect. If urlRedirect is specified, service or routeAction must not
	be set. */
	UrlRedirect UrlRedirect `json:"urlRedirect,omitempty"`
}

type PerTryTimeout struct {
	/* Span of time that's a fraction of a second at nanosecond resolution. Durations
	less than one second are represented with a 0 'seconds' field and a positive
	'nanos' field. Must be from 0 to 999,999,999 inclusive. */
	Nanos int `json:"nanos,omitempty"`
	/* Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	inclusive. */
	Seconds string `json:"seconds,omitempty"`
}

type QueryParameterMatches struct {
	/* The queryParameterMatch matches if the value of the parameter exactly matches
	the contents of exactMatch. Only one of presentMatch, exactMatch and regexMatch
	must be set. */
	ExactMatch string `json:"exactMatch,omitempty"`
	/* The name of the query parameter to match. The query parameter must exist in the
	request, in the absence of which the request match fails. */
	Name string `json:"name,omitempty"`
	/* Specifies that the queryParameterMatch matches if the request contains the query
	parameter, irrespective of whether the parameter has a value or not. Only one of
	presentMatch, exactMatch and regexMatch must be set. */
	PresentMatch bool `json:"presentMatch,omitempty"`
	/* The queryParameterMatch matches if the value of the parameter matches the
	regular expression specified by regexMatch. For the regular expression grammar,
	please see en.cppreference.com/w/cpp/regex/ecmascript  Only one of presentMatch,
	exactMatch and regexMatch must be set. */
	RegexMatch string `json:"regexMatch,omitempty"`
}

type RangeMatch struct {
	/* The end of the range (exclusive). */
	RangeEnd int `json:"rangeEnd,omitempty"`
	/* The start of the range (inclusive). */
	RangeStart int `json:"rangeStart,omitempty"`
}

type RequestHeadersToAdd struct {
	/* The name of the header. */
	HeaderName string `json:"headerName,omitempty"`
	/* The value of the header to add. */
	HeaderValue string `json:"headerValue,omitempty"`
	/* If false, headerValue is appended to any values that already exist for the
	header. If true, headerValue is set for the header, discarding any values that
	were set for that header. */
	Replace bool `json:"replace,omitempty"`
}

type RequestMirrorPolicy struct {
	/* The backend service resource being mirrored to. */
	BackendServiceRef v1alpha1.ResourceRef `json:"backendServiceRef,omitempty"`
}

type ResponseHeadersToAdd struct {
	/* The name of the header. */
	HeaderName string `json:"headerName,omitempty"`
	/* The value of the header to add. */
	HeaderValue string `json:"headerValue,omitempty"`
	/* If false, headerValue is appended to any values that already exist for the
	header. If true, headerValue is set for the header, discarding any values that
	were set for that header. */
	Replace bool `json:"replace,omitempty"`
}

type RetryPolicy struct {
	/* Specifies the allowed number retries. This number must be > 0. */
	NumRetries int `json:"numRetries,omitempty"`
	/* Specifies a non-zero timeout per retry attempt.
	If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction
	is not set, will use the largest timeout among all backend services associated with the route. */
	PerTryTimeout PerTryTimeout `json:"perTryTimeout,omitempty"`
	/* Specfies one or more conditions when this retry rule applies. Valid values are:

	* 5xx: Loadbalancer will attempt a retry if the backend service responds with
	  any 5xx response code, or if the backend service does not respond at all,
	  example: disconnects, reset, read timeout, connection failure, and refused
	  streams.
	* gateway-error: Similar to 5xx, but only applies to response codes
	  502, 503 or 504.
	* connect-failure: Loadbalancer will retry on failures
	  connecting to backend services, for example due to connection timeouts.
	* retriable-4xx: Loadbalancer will retry for retriable 4xx response codes.
	  Currently the only retriable error supported is 409.
	* refused-stream: Loadbalancer will retry if the backend service resets the stream with a
	  REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	* cancelled: Loadbalancer will retry if the gRPC status code in the response
	  header is set to cancelled
	* deadline-exceeded: Loadbalancer will retry if the
	  gRPC status code in the response header is set to deadline-exceeded
	* resource-exhausted: Loadbalancer will retry if the gRPC status code in the response
	  header is set to resource-exhausted
	* unavailable: Loadbalancer will retry if the gRPC status code in
	  the response header is set to unavailable */
	RetryConditions []string `json:"retryConditions,omitempty"`
}

type RouteAction struct {
	/* The specification for allowing client side cross-origin requests. Please see W3C
	Recommendation for Cross Origin Resource Sharing */
	CorsPolicy CorsPolicy `json:"corsPolicy,omitempty"`
	/* The specification for fault injection introduced into traffic to test the
	resiliency of clients to backend service failure. As part of fault injection,
	when clients send requests to a backend service, delays can be introduced by
	Loadbalancer on a percentage of requests before sending those request to the
	backend service. Similarly requests from clients can be aborted by the
	Loadbalancer for a percentage of requests. timeout and retry_policy will be
	ignored by clients that are configured with a fault_injection_policy. */
	FaultInjectionPolicy FaultInjectionPolicy `json:"faultInjectionPolicy,omitempty"`
	/* Specifies the policy on how requests intended for the route's backends are
	shadowed to a separate mirrored backend service. Loadbalancer does not wait for
	responses from the shadow service. Prior to sending traffic to the shadow
	service, the host / authority header is suffixed with -shadow. */
	RequestMirrorPolicy RequestMirrorPolicy `json:"requestMirrorPolicy,omitempty"`
	/* Specifies the retry policy associated with this route. */
	RetryPolicy RetryPolicy `json:"retryPolicy,omitempty"`
	/* Specifies the timeout for the selected route. Timeout is computed from the time
	the request is has been fully processed (i.e. end-of-stream) up until the
	response has been completely processed. Timeout includes all retries. If not
	specified, the default value is 15 seconds. */
	Timeout Timeout `json:"timeout,omitempty"`
	/* The spec to modify the URL of the request, prior to forwarding the request to
	the matched service */
	UrlRewrite UrlRewrite `json:"urlRewrite,omitempty"`
	/* A list of weighted backend services to send traffic to when a route match
	occurs. The weights determine the fraction of traffic that flows to their
	corresponding backend service. If all traffic needs to go to a single backend
	service, there must be one  weightedBackendService with weight set to a non 0
	number. Once a backendService is identified and before forwarding the request to
	the backend service, advanced routing actions like Url rewrites and header
	transformations are applied depending on additional settings specified in this
	HttpRouteAction. */
	WeightedBackendServices []WeightedBackendServices `json:"weightedBackendServices,omitempty"`
}

type RouteRules struct {
	/* Specifies changes to request and response headers that need to take effect for
	the selected backendService. The headerAction specified here are applied before
	the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].r
	outeAction.weightedBackendService.backendServiceWeightAction[].headerAction */
	HeaderAction HeaderAction `json:"headerAction,omitempty"`
	/* The rules for determining a match. */
	MatchRules []MatchRules `json:"matchRules,omitempty"`
	/* For routeRules within a given pathMatcher, priority determines the order
	in which load balancer will interpret routeRules. RouteRules are evaluated
	in order of priority, from the lowest to highest number. The priority of
	a rule decreases as its number increases (1, 2, 3, N+1). The first rule
	that matches the request is applied.

	You cannot configure two or more routeRules with the same priority.
	Priority for each rule must be set to a number between 0 and
	2147483647 inclusive.

	Priority numbers can have gaps, which enable you to add or remove rules
	in the future without affecting the rest of the rules. For example,
	1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which
	you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the
	future without any impact on existing rules. */
	Priority int `json:"priority,omitempty"`
	/* In response to a matching matchRule, the load balancer performs advanced routing
	actions like URL rewrites, header transformations, etc. prior to forwarding the
	request to the selected backend. If  routeAction specifies any
	weightedBackendServices, service must not be set. Conversely if service is set,
	routeAction cannot contain any  weightedBackendServices. Only one of routeAction
	or urlRedirect must be set. */
	RouteAction RouteAction `json:"routeAction,omitempty"`
	/* The backend service resource to which traffic is
	directed if this rule is matched. If routeAction is additionally specified,
	advanced routing actions like URL Rewrites, etc. take effect prior to sending
	the request to the backend. However, if service is specified, routeAction cannot
	contain any weightedBackendService s. Conversely, if routeAction specifies any
	weightedBackendServices, service must not be specified. Only one of urlRedirect,
	service or routeAction.weightedBackendService must be set. */
	Service string `json:"service,omitempty"`
	/* When this rule is matched, the request is redirected to a URL specified by
	urlRedirect. If urlRedirect is specified, service or routeAction must not be
	set. */
	UrlRedirect UrlRedirect `json:"urlRedirect,omitempty"`
}

type Service struct {
	/*  */
	BackendBucketRef v1alpha1.ResourceRef `json:"backendBucketRef,omitempty"`
	/*  */
	BackendServiceRef v1alpha1.ResourceRef `json:"backendServiceRef,omitempty"`
}

type Test struct {
	/* Description of this test case. */
	Description string `json:"description,omitempty"`
	/* Host portion of the URL. */
	Host string `json:"host,omitempty"`
	/* Path portion of the URL. */
	Path string `json:"path,omitempty"`
	/* The backend service or backend bucket link that should be matched
	by this test. */
	Service Service `json:"service,omitempty"`
}

type Timeout struct {
	/* Span of time that's a fraction of a second at nanosecond resolution. Durations
	less than one second are represented with a 0 'seconds' field and a positive
	'nanos' field. Must be from 0 to 999,999,999 inclusive. */
	Nanos int `json:"nanos,omitempty"`
	/* Span of time at a resolution of a second. Must be from 0 to 315,576,000,000
	inclusive. */
	Seconds string `json:"seconds,omitempty"`
}

type UrlRedirect struct {
	/* The host that will be used in the redirect response instead of the one that was
	supplied in the request. The value must be between 1 and 255 characters. */
	HostRedirect string `json:"hostRedirect,omitempty"`
	/* If set to true, the URL scheme in the redirected request is set to https. If set
	to false, the URL scheme of the redirected request will remain the same as that
	of the request. This must only be set for UrlMaps used in TargetHttpProxys.
	Setting this true for TargetHttpsProxy is not permitted. Defaults to false. */
	HttpsRedirect bool `json:"httpsRedirect,omitempty"`
	/* The path that will be used in the redirect response instead of the one that was
	supplied in the request. Only one of pathRedirect or prefixRedirect must be
	specified. The value must be between 1 and 1024 characters. */
	PathRedirect string `json:"pathRedirect,omitempty"`
	/* The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch,
	retaining the remaining portion of the URL before redirecting the request. */
	PrefixRedirect string `json:"prefixRedirect,omitempty"`
	/* The HTTP Status code to use for this RedirectAction. Supported values are:

	* MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.

	* FOUND, which corresponds to 302.

	* SEE_OTHER which corresponds to 303.

	* TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.

	* PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained. Possible values: ["FOUND", "MOVED_PERMANENTLY_DEFAULT", "PERMANENT_REDIRECT", "SEE_OTHER", "TEMPORARY_REDIRECT"] */
	RedirectResponseCode string `json:"redirectResponseCode,omitempty"`
	/* If set to true, any accompanying query portion of the original URL is removed
	prior to redirecting the request. If set to false, the query portion of the
	original URL is retained. Defaults to false. */
	StripQuery bool `json:"stripQuery,omitempty"`
}

type UrlRewrite struct {
	/* Prior to forwarding the request to the selected service, the request's host
	header is replaced with contents of hostRewrite. The value must be between 1 and
	255 characters. */
	HostRewrite string `json:"hostRewrite,omitempty"`
	/* Prior to forwarding the request to the selected backend service, the matching
	portion of the request's path is replaced by pathPrefixRewrite. The value must
	be between 1 and 1024 characters. */
	PathPrefixRewrite string `json:"pathPrefixRewrite,omitempty"`
}

type WeightedBackendServices struct {
	/* The default backend service. Before forwarding the request to the
	backend service, the loadbalancer applies any relevant
	headerActions specified as part of this backendServiceWeight. */
	BackendServiceRef v1alpha1.ResourceRef `json:"backendServiceRef,omitempty"`
	/* Specifies changes to request and response headers that need to take effect for
	the selected backendService. headerAction specified here take effect before
	headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. */
	HeaderAction HeaderAction `json:"headerAction,omitempty"`
	/* Specifies the fraction of traffic sent to backendService, computed as weight /
	(sum of all weightedBackendService weights in routeAction) . The selection of a
	backend service is determined only for new traffic. Once a user's request has
	been directed to a backendService, subsequent requests will be sent to the same
	backendService as determined by the BackendService's session affinity policy.
	The value must be between 0 and 1000 */
	Weight int `json:"weight,omitempty"`
}

type ComputeURLMapSpec struct {
	/* defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions
	like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend.
	If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService
	is set, defaultRouteAction cannot contain any weightedBackendServices.

	Only one of defaultRouteAction or defaultUrlRedirect must be set. */
	DefaultRouteAction DefaultRouteAction `json:"defaultRouteAction,omitempty"`
	/* The backend service or backend bucket to use when none of the given
	rules match. */
	DefaultService DefaultService `json:"defaultService,omitempty"`
	/* When none of the specified hostRules match, the request is redirected to a URL specified
	by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
	defaultRouteAction must not be set. */
	DefaultUrlRedirect DefaultUrlRedirect `json:"defaultUrlRedirect,omitempty"`
	/* An optional description of this resource. Provide this property when you create
	the resource. */
	Description string `json:"description,omitempty"`
	/* Specifies changes to request and response headers that need to take effect for
	the selected backendService. The headerAction specified here take effect after
	headerAction specified under pathMatcher. */
	HeaderAction HeaderAction `json:"headerAction,omitempty"`
	/* The list of HostRules to use against the URL. */
	HostRule []HostRule `json:"hostRule,omitempty"`
	/* Location represents the geographical location of the ComputeURLMap. Specify "global" for global resources. */
	Location string `json:"location,omitempty"`
	/* The list of named PathMatchers to use against the URL. */
	PathMatcher []PathMatcher `json:"pathMatcher,omitempty"`
	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
	/* The list of expected URL mapping tests. Request to update this UrlMap will
	succeed only if all of the test cases pass. You can specify a maximum of 100
	tests per UrlMap. */
	Test []Test `json:"test,omitempty"`
}

type ComputeURLMapStatus struct {
	/* Conditions represents the latest available observations of the
	   ComputeURLMap's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Creation timestamp in RFC3339 text format. */
	CreationTimestamp string `json:"creationTimestamp,omitempty"`
	/* Fingerprint of this resource. A hash of the contents stored in this object. This
	field is used in optimistic locking. */
	Fingerprint string `json:"fingerprint,omitempty"`
	/* The unique identifier for the resource. */
	MapId int `json:"mapId,omitempty"`
	/*  */
	SelfLink string `json:"selfLink,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeURLMap is the Schema for the compute API
// +k8s:openapi-gen=true
type ComputeURLMap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ComputeURLMapSpec   `json:"spec,omitempty"`
	Status ComputeURLMapStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeURLMapList contains a list of ComputeURLMap
type ComputeURLMapList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []ComputeURLMap `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ComputeURLMap{}, &ComputeURLMapList{})
}
