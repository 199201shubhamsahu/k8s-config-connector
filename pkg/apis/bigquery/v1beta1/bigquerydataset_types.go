// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Access struct {
	/* A domain to grant access to. Any users signed in with the
	domain specified will be granted the specified access */
	Domain string `json:"domain,omitempty"`
	/* An email address of a Google Group to grant access to. */
	GroupByEmail string `json:"groupByEmail,omitempty"`
	/* Describes the rights granted to the user specified by the other
	member of the access object. Basic, predefined, and custom roles
	are supported. Predefined roles that have equivalent basic roles
	are swapped by the API to their basic counterparts. See
	[official docs](https://cloud.google.com/bigquery/docs/access-control). */
	Role string `json:"role,omitempty"`
	/* A special group to grant access to. Possible values include:


	* 'projectOwners': Owners of the enclosing project.


	* 'projectReaders': Readers of the enclosing project.


	* 'projectWriters': Writers of the enclosing project.


	* 'allAuthenticatedUsers': All authenticated BigQuery users. */
	SpecialGroup string `json:"specialGroup,omitempty"`
	/* An email address of a user to grant access to. For example:
	fred@example.com */
	UserByEmail string `json:"userByEmail,omitempty"`
	/* A view from a different dataset to grant access to. Queries
	executed against that view will have read access to tables in
	this dataset. The role field is not required when this field is
	set. If that view is updated by any user, access to the view
	needs to be granted again via an update operation. */
	View BigquerydatasetView `json:"view,omitempty"`
}

type BigquerydatasetView struct {
	/* The ID of the dataset containing this table. */
	DatasetId string `json:"datasetId,omitempty"`
	/* The ID of the project containing this table. */
	ProjectId string `json:"projectId,omitempty"`
	/* The ID of the table. The ID must contain only letters (a-z,
	A-Z), numbers (0-9), or underscores (_). The maximum length
	is 1,024 characters. */
	TableId string `json:"tableId,omitempty"`
}

type DefaultEncryptionConfiguration struct {
	/* Describes the Cloud KMS encryption key that will be used to protect destination
	BigQuery table. The BigQuery Service Account associated with your project requires
	access to this encryption key. */
	KmsKeyRef v1alpha1.ResourceRef `json:"kmsKeyRef,omitempty"`
}

type BigQueryDatasetSpec struct {
	/* An array of objects that define dataset access for one or more entities. */
	Access []Access `json:"access,omitempty"`
	/* The default encryption key for all tables in the dataset. Once this property is set,
	all newly-created partitioned tables in the dataset will have encryption key set to
	this value, unless table creation request (or query) overrides the key. */
	DefaultEncryptionConfiguration DefaultEncryptionConfiguration `json:"defaultEncryptionConfiguration,omitempty"`
	/* The default partition expiration for all partitioned tables in
	the dataset, in milliseconds.


	Once this property is set, all newly-created partitioned tables in
	the dataset will have an 'expirationMs' property in the 'timePartitioning'
	settings set to this value, and changing the value will only
	affect new tables, not existing ones. The storage in a partition will
	have an expiration time of its partition time plus this value.
	Setting this property overrides the use of 'defaultTableExpirationMs'
	for partitioned tables: only one of 'defaultTableExpirationMs' and
	'defaultPartitionExpirationMs' will be used for any new partitioned
	table. If you provide an explicit 'timePartitioning.expirationMs' when
	creating or updating a partitioned table, that value takes precedence
	over the default partition expiration time indicated by this property. */
	DefaultPartitionExpirationMs int `json:"defaultPartitionExpirationMs,omitempty"`
	/* The default lifetime of all tables in the dataset, in milliseconds.
	The minimum value is 3600000 milliseconds (one hour).


	Once this property is set, all newly-created tables in the dataset
	will have an 'expirationTime' property set to the creation time plus
	the value in this property, and changing the value will only affect
	new tables, not existing ones. When the 'expirationTime' for a given
	table is reached, that table will be deleted automatically.
	If a table's 'expirationTime' is modified or removed before the
	table expires, or if you provide an explicit 'expirationTime' when
	creating a table, that value takes precedence over the default
	expiration time indicated by this property. */
	DefaultTableExpirationMs int `json:"defaultTableExpirationMs,omitempty"`
	/* A user-friendly description of the dataset */
	Description string `json:"description,omitempty"`
	/* A descriptive name for the dataset */
	FriendlyName string `json:"friendlyName,omitempty"`
	/* Immutable. The geographic location where the dataset should reside.
	See [official docs](https://cloud.google.com/bigquery/docs/dataset-locations).


	There are two types of locations, regional or multi-regional. A regional
	location is a specific geographic place, such as Tokyo, and a multi-regional
	location is a large geographic area, such as the United States, that
	contains at least two geographic places.


	The default value is multi-regional location 'US'.
	Changing this forces a new resource to be created. */
	Location string `json:"location,omitempty"`
	/* Immutable. Optional. The datasetId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
}

type BigQueryDatasetStatus struct {
	/* Conditions represents the latest available observations of the
	   BigQueryDataset's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The time when this dataset was created, in milliseconds since the
	epoch. */
	CreationTime int `json:"creationTime,omitempty"`
	/* A hash of the resource. */
	Etag string `json:"etag,omitempty"`
	/* The date when this dataset or any of its tables was last modified, in
	milliseconds since the epoch. */
	LastModifiedTime int `json:"lastModifiedTime,omitempty"`
	/*  */
	SelfLink string `json:"selfLink,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BigQueryDataset is the Schema for the bigquery API
// +k8s:openapi-gen=true
type BigQueryDataset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   BigQueryDatasetSpec   `json:"spec,omitempty"`
	Status BigQueryDatasetStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BigQueryDatasetList contains a list of BigQueryDataset
type BigQueryDatasetList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []BigQueryDataset `json:"items"`
}

func init() {
	SchemeBuilder.Register(&BigQueryDataset{}, &BigQueryDatasetList{})
}
