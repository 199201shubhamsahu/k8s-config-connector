// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type InstanceAuthorizedNetworks struct {
	/*  */
	ExpirationTime string `json:"expirationTime,omitempty"`
	/*  */
	Name string `json:"name,omitempty"`
	/*  */
	Value string `json:"value,omitempty"`
}

type InstanceBackupConfiguration struct {
	/*  */
	BackupRetentionSettings InstanceBackupRetentionSettings `json:"backupRetentionSettings,omitempty"`
	/* True if binary logging is enabled. If settings.backup_configuration.enabled is false, this must be as well. Cannot be used with Postgres. */
	BinaryLogEnabled bool `json:"binaryLogEnabled,omitempty"`
	/* True if backup configuration is enabled. */
	Enabled bool `json:"enabled,omitempty"`
	/* Location of the backup configuration. */
	Location string `json:"location,omitempty"`
	/* True if Point-in-time recovery is enabled. */
	PointInTimeRecoveryEnabled bool `json:"pointInTimeRecoveryEnabled,omitempty"`
	/* HH:MM format time indicating when backup configuration starts. */
	StartTime string `json:"startTime,omitempty"`
	/* The number of days of transaction logs we retain for point in time restore, from 1-7. */
	TransactionLogRetentionDays int `json:"transactionLogRetentionDays,omitempty"`
}

type InstanceBackupRetentionSettings struct {
	/* Number of backups to retain. */
	RetainedBackups int `json:"retainedBackups,omitempty"`
	/* The unit that 'retainedBackups' represents. Defaults to COUNT */
	RetentionUnit string `json:"retentionUnit,omitempty"`
}

type InstanceDatabaseFlags struct {
	/* Name of the flag. */
	Name string `json:"name,omitempty"`
	/* Value of the flag. */
	Value string `json:"value,omitempty"`
}

type InstanceInsightsConfig struct {
	/* True if Query Insights feature is enabled. */
	QueryInsightsEnabled bool `json:"queryInsightsEnabled,omitempty"`
	/* Maximum query length stored in bytes. Between 256 and 4500. Default to 1024. */
	QueryStringLength int `json:"queryStringLength,omitempty"`
	/* True if Query Insights will record application tags from query when enabled. */
	RecordApplicationTags bool `json:"recordApplicationTags,omitempty"`
	/* True if Query Insights will record client address when enabled. */
	RecordClientAddress bool `json:"recordClientAddress,omitempty"`
}

type InstanceIpConfiguration struct {
	/*  */
	AuthorizedNetworks []InstanceAuthorizedNetworks `json:"authorizedNetworks,omitempty"`
	/* Whether this Cloud SQL instance should be assigned a public IPV4 address. Either ipv4_enabled must be enabled or a private_network must be configured. */
	Ipv4Enabled bool `json:"ipv4Enabled,omitempty"`
	/*  */
	PrivateNetworkRef v1alpha1.ResourceRef `json:"privateNetworkRef,omitempty"`
	/*  */
	RequireSsl bool `json:"requireSsl,omitempty"`
}

type InstanceLocationPreference struct {
	/* A Google App Engine application whose zone to remain in. Must be in the same region as this instance. */
	FollowGaeApplication string `json:"followGaeApplication,omitempty"`
	/* The preferred compute engine zone. */
	Zone string `json:"zone,omitempty"`
}

type InstanceMaintenanceWindow struct {
	/* Day of week (1-7), starting on Monday */
	Day int `json:"day,omitempty"`
	/* Hour of day (0-23), ignored if day not set */
	Hour int `json:"hour,omitempty"`
	/* Receive updates earlier (canary) or later (stable) */
	UpdateTrack string `json:"updateTrack,omitempty"`
}

type InstancePassword struct {
	/* Value of the field. Cannot be used if 'valueFrom' is specified. */
	Value string `json:"value,omitempty"`
	/* Source for the field's value. Cannot be used if 'value' is specified. */
	ValueFrom InstanceValueFrom `json:"valueFrom,omitempty"`
}

type InstanceReplicaConfiguration struct {
	/* Immutable. PEM representation of the trusted CA's x509 certificate. */
	CaCertificate string `json:"caCertificate,omitempty"`
	/* Immutable. PEM representation of the replica's x509 certificate. */
	ClientCertificate string `json:"clientCertificate,omitempty"`
	/* Immutable. PEM representation of the replica's private key. The corresponding public key in encoded in the client_certificate. */
	ClientKey string `json:"clientKey,omitempty"`
	/* Immutable. The number of seconds between connect retries. */
	ConnectRetryInterval int `json:"connectRetryInterval,omitempty"`
	/* Immutable. Path to a SQL file in Google Cloud Storage from which replica instances are created. Format is gs://bucket/filename. */
	DumpFilePath string `json:"dumpFilePath,omitempty"`
	/* Immutable. Specifies if the replica is the failover target. If the field is set to true the replica will be designated as a failover replica. If the master instance fails, the replica instance will be promoted as the new master instance. */
	FailoverTarget bool `json:"failoverTarget,omitempty"`
	/* Immutable. Time in ms between replication heartbeats. */
	MasterHeartbeatPeriod int `json:"masterHeartbeatPeriod,omitempty"`
	/* Immutable. Password for the replication connection. */
	Password InstancePassword `json:"password,omitempty"`
	/* Immutable. Permissible ciphers for use in SSL encryption. */
	SslCipher string `json:"sslCipher,omitempty"`
	/* Immutable. Username for replication connection. */
	Username string `json:"username,omitempty"`
	/* Immutable. True if the master's common name value is checked during the SSL handshake. */
	VerifyServerCertificate bool `json:"verifyServerCertificate,omitempty"`
}

type InstanceRootPassword struct {
	/* Value of the field. Cannot be used if 'valueFrom' is specified. */
	Value string `json:"value,omitempty"`
	/* Source for the field's value. Cannot be used if 'value' is specified. */
	ValueFrom InstanceValueFrom `json:"valueFrom,omitempty"`
}

type InstanceSettings struct {
	/* This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND. */
	ActivationPolicy string `json:"activationPolicy,omitempty"`
	/* DEPRECATED — This property is only applicable to First Generation instances, and First Generation instances are now deprecated. This property is only applicable to First Generation instances. First Generation instances are now deprecated, see https://cloud.google.com/sql/docs/mysql/deprecation-notice for information on how to upgrade to Second Generation instances. A list of Google App Engine project names that are allowed to access this instance. */
	AuthorizedGaeApplications []string `json:"authorizedGaeApplications,omitempty"`
	/* The availability type of the Cloud SQL instance, high availability
	(REGIONAL) or single zone (ZONAL). For MySQL instances, ensure that
	settings.backup_configuration.enabled and
	settings.backup_configuration.binary_log_enabled are both set to true. */
	AvailabilityType string `json:"availabilityType,omitempty"`
	/*  */
	BackupConfiguration InstanceBackupConfiguration `json:"backupConfiguration,omitempty"`
	/* DEPRECATED — This property is only applicable to First Generation instances, and First Generation instances are now deprecated. This property is only applicable to First Generation instances. First Generation instances are now deprecated, see here for information on how to upgrade to Second Generation instances. Specific to read instances, indicates when crash-safe replication flags are enabled. */
	CrashSafeReplication bool `json:"crashSafeReplication,omitempty"`
	/*  */
	DatabaseFlags []InstanceDatabaseFlags `json:"databaseFlags,omitempty"`
	/*  */
	DiskAutoresize bool `json:"diskAutoresize,omitempty"`
	/* The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. */
	DiskSize int `json:"diskSize,omitempty"`
	/* The type of data disk: PD_SSD or PD_HDD. */
	DiskType string `json:"diskType,omitempty"`
	/* Configuration of Query Insights. */
	InsightsConfig InstanceInsightsConfig `json:"insightsConfig,omitempty"`
	/*  */
	IpConfiguration InstanceIpConfiguration `json:"ipConfiguration,omitempty"`
	/*  */
	LocationPreference InstanceLocationPreference `json:"locationPreference,omitempty"`
	/* Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time. */
	MaintenanceWindow InstanceMaintenanceWindow `json:"maintenanceWindow,omitempty"`
	/* Pricing plan for this instance, can only be PER_USE. */
	PricingPlan string `json:"pricingPlan,omitempty"`
	/* DEPRECATED — This property is only applicable to First Generation instances, and First Generation instances are now deprecated. This property is only applicable to First Generation instances. First Generation instances are now deprecated, see here for information on how to upgrade to Second Generation instances. Replication type for this instance, can be one of ASYNCHRONOUS or SYNCHRONOUS. */
	ReplicationType string `json:"replicationType,omitempty"`
	/* The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types such as db-f1-micro, and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types. */
	Tier string `json:"tier,omitempty"`
}

type InstanceValueFrom struct {
	/* Reference to a value with the given key in the given Secret in the resource's namespace. */
	SecretKeyRef v1alpha1.ResourceRef `json:"secretKeyRef,omitempty"`
}

type SQLInstanceSpec struct {
	/* Immutable. The MySQL, PostgreSQL or SQL Server (beta) version to use. Supported values include MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6,POSTGRES_11, SQLSERVER_2017_STANDARD, SQLSERVER_2017_ENTERPRISE, SQLSERVER_2017_EXPRESS, SQLSERVER_2017_WEB. Database Version Policies includes an up-to-date reference of supported versions. */
	DatabaseVersion string `json:"databaseVersion,omitempty"`
	/*  */
	EncryptionKMSCryptoKeyRef v1alpha1.ResourceRef `json:"encryptionKMSCryptoKeyRef,omitempty"`
	/*  */
	MasterInstanceRef v1alpha1.ResourceRef `json:"masterInstanceRef,omitempty"`
	/* Immutable. The region the instance will sit in. Note, Cloud SQL is not available in all regions. A valid region must be provided to use this resource. If a region is not provided in the resource definition, the provider region will be used instead, but this will be an apply-time error for instances if the provider region is not supported with Cloud SQL. If you choose not to provide the region argument for this resource, make sure you understand this. */
	Region string `json:"region,omitempty"`
	/* The configuration for replication. */
	ReplicaConfiguration InstanceReplicaConfiguration `json:"replicaConfiguration,omitempty"`
	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
	/* Immutable. Initial root password. Required for MS SQL Server, ignored by MySQL and PostgreSQL. */
	RootPassword InstanceRootPassword `json:"rootPassword,omitempty"`
	/* The settings to use for the database. The configuration is detailed below. */
	Settings InstanceSettings `json:"settings,omitempty"`
}

type InstanceIpAddressStatus struct {
	/*  */
	IpAddress string `json:"ipAddress,omitempty"`

	/*  */
	TimeToRetire string `json:"timeToRetire,omitempty"`

	/*  */
	Type string `json:"type,omitempty"`
}

type InstanceServerCaCertStatus struct {
	/* The CA Certificate used to connect to the SQL Instance via SSL. */
	Cert string `json:"cert,omitempty"`

	/* The CN valid for the CA Cert. */
	CommonName string `json:"commonName,omitempty"`

	/* Creation time of the CA Cert. */
	CreateTime string `json:"createTime,omitempty"`

	/* Expiration time of the CA Cert. */
	ExpirationTime string `json:"expirationTime,omitempty"`

	/* SHA Fingerprint of the CA Cert. */
	Sha1Fingerprint string `json:"sha1Fingerprint,omitempty"`
}

type SQLInstanceStatus struct {
	/* Conditions represent the latest available observations of the
	   SQLInstance's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The connection name of the instance to be used in connection strings. For example, when connecting with Cloud SQL Proxy. */
	ConnectionName string `json:"connectionName,omitempty"`
	/*  */
	FirstIpAddress string `json:"firstIpAddress,omitempty"`
	/*  */
	IpAddress []InstanceIpAddressStatus `json:"ipAddress,omitempty"`
	/*  */
	PrivateIpAddress string `json:"privateIpAddress,omitempty"`
	/*  */
	PublicIpAddress string `json:"publicIpAddress,omitempty"`
	/* The URI of the created resource. */
	SelfLink string `json:"selfLink,omitempty"`
	/*  */
	ServerCaCert InstanceServerCaCertStatus `json:"serverCaCert,omitempty"`
	/* The service account email address assigned to the instance. */
	ServiceAccountEmailAddress string `json:"serviceAccountEmailAddress,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SQLInstance is the Schema for the sql API
// +k8s:openapi-gen=true
type SQLInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   SQLInstanceSpec   `json:"spec,omitempty"`
	Status SQLInstanceStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SQLInstanceList contains a list of SQLInstance
type SQLInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLInstance `json:"items"`
}

func init() {
	SchemeBuilder.Register(&SQLInstance{}, &SQLInstanceList{})
}
