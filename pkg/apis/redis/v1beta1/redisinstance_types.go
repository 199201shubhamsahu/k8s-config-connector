// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type RedisInstanceSpec struct {
	/* Immutable. Only applicable to STANDARD_HA tier which protects the instance
	against zonal failures by provisioning it across two zones.
	If provided, it must be a different zone from the one provided in
	[locationId]. */
	AlternativeLocationId string `json:"alternativeLocationId,omitempty"`
	/* Optional. Indicates whether OSS Redis AUTH is enabled for the
	instance. If set to "true" AUTH is enabled on the instance.
	Default value is "false" meaning AUTH is disabled. */
	AuthEnabled bool `json:"authEnabled,omitempty"`
	/*  */
	AuthString string `json:"authString,omitempty"`
	/* The network to which the instance is connected. If left
	unspecified, the default network will be used. */
	AuthorizedNetworkRef v1alpha1.ResourceRef `json:"authorizedNetworkRef,omitempty"`
	/* Immutable. The connection mode of the Redis instance. Default value: "DIRECT_PEERING" Possible values: ["DIRECT_PEERING", "PRIVATE_SERVICE_ACCESS"] */
	ConnectMode string `json:"connectMode,omitempty"`
	/* An arbitrary and optional user-provided name for the instance. */
	DisplayName string `json:"displayName,omitempty"`
	/* Immutable. The zone where the instance will be provisioned. If not provided,
	the service will choose a zone for the instance. For STANDARD_HA tier,
	instances will be created across two zones for protection against
	zonal failures. If [alternativeLocationId] is also provided, it must
	be different from [locationId]. */
	LocationId string `json:"locationId,omitempty"`
	/* Redis memory size in GiB. */
	MemorySizeGb int `json:"memorySizeGb,omitempty"`
	/* Redis configuration parameters, according to http://redis.io/topics/config.
	Please check Memorystore documentation for the list of supported parameters:
	https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs */
	RedisConfigs map[string]string `json:"redisConfigs,omitempty"`
	/* Immutable. The version of Redis software. If not provided, latest supported
	version will be used. Currently, the supported values are:

	- REDIS_5_0 for Redis 5.0 compatibility
	- REDIS_4_0 for Redis 4.0 compatibility
	- REDIS_3_2 for Redis 3.2 compatibility */
	RedisVersion string `json:"redisVersion,omitempty"`
	/* Immutable. The name of the Redis region of the instance. */
	Region string `json:"region,omitempty"`
	/* Immutable. The CIDR range of internal addresses that are reserved for this
	instance. If not provided, the service will choose an unused /29
	block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
	unique and non-overlapping with existing subnets in an authorized
	network. */
	ReservedIpRange string `json:"reservedIpRange,omitempty"`
	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
	/* Immutable. The service tier of the instance. Must be one of these values:

	- BASIC: standalone instance
	- STANDARD_HA: highly available primary/replica instances Default value: "BASIC" Possible values: ["BASIC", "STANDARD_HA"] */
	Tier string `json:"tier,omitempty"`
}

type RedisInstanceStatus struct {
	/* Conditions represents the latest available observations of the
	   RedisInstance's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The time the instance was created in RFC3339 UTC "Zulu" format,
	accurate to nanoseconds. */
	CreateTime string `json:"createTime,omitempty"`
	/* The current zone where the Redis endpoint is placed.
	For Basic Tier instances, this will always be the same as the
	[locationId] provided by the user at creation time. For Standard Tier
	instances, this can be either [locationId] or [alternativeLocationId]
	and can change after a failover event. */
	CurrentLocationId string `json:"currentLocationId,omitempty"`
	/* Hostname or IP address of the exposed Redis endpoint used by clients
	to connect to the service. */
	Host string `json:"host,omitempty"`
	/* Output only. Cloud IAM identity used by import / export operations
	to transfer data to/from Cloud Storage. Format is "serviceAccount:".
	The value may change over time for a given instance so should be
	checked before each import/export operation. */
	PersistenceIamIdentity string `json:"persistenceIamIdentity,omitempty"`
	/* The port number of the exposed Redis endpoint. */
	Port int `json:"port,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// RedisInstance is the Schema for the redis API
// +k8s:openapi-gen=true
type RedisInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   RedisInstanceSpec   `json:"spec,omitempty"`
	Status RedisInstanceStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// RedisInstanceList contains a list of RedisInstance
type RedisInstanceList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []RedisInstance `json:"items"`
}

func init() {
	SchemeBuilder.Register(&RedisInstance{}, &RedisInstanceList{})
}
