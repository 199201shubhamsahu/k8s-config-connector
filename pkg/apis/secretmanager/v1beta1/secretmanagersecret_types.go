// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type SecretCustomerManagedEncryption struct {
	/* Customer Managed Encryption for the secret. */
	KmsKeyRef v1alpha1.ResourceRef `json:"kmsKeyRef"`
}

type SecretReplicas struct {
	/* Customer Managed Encryption for the secret. */
	// +optional
	CustomerManagedEncryption *SecretCustomerManagedEncryption `json:"customerManagedEncryption,omitempty"`

	/* The canonical IDs of the location to replicate data. For example: "us-east1". */
	Location string `json:"location"`
}

type SecretReplication struct {
	/* The Secret will automatically be replicated without any restrictions. */
	// +optional
	Automatic *bool `json:"automatic,omitempty"`

	/* The Secret will automatically be replicated without any restrictions. */
	// +optional
	UserManaged *SecretUserManaged `json:"userManaged,omitempty"`
}

type SecretUserManaged struct {
	/* The list of Replicas for this Secret. Cannot be empty. */
	Replicas []SecretReplicas `json:"replicas"`
}

type SecretManagerSecretSpec struct {
	/* Immutable. The replication policy of the secret data attached to the Secret. It cannot be changed
	after the Secret has been created. */
	Replication SecretReplication `json:"replication"`

	/* Immutable. Optional. The secretId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`
}

type SecretManagerSecretStatus struct {
	/* Conditions represent the latest available observations of the
	   SecretManagerSecret's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The time at which the Secret was created. */
	CreateTime string `json:"createTime,omitempty"`
	/* The resource name of the Secret. Format:
	'projects/{{project}}/secrets/{{secret_id}}' */
	Name string `json:"name,omitempty"`
	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	ObservedGeneration int `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SecretManagerSecret is the Schema for the secretmanager API
// +k8s:openapi-gen=true
type SecretManagerSecret struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   SecretManagerSecretSpec   `json:"spec,omitempty"`
	Status SecretManagerSecretStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SecretManagerSecretList contains a list of SecretManagerSecret
type SecretManagerSecretList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretManagerSecret `json:"items"`
}

func init() {
	SchemeBuilder.Register(&SecretManagerSecret{}, &SecretManagerSecretList{})
}
