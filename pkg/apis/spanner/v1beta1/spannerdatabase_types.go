// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type SpannerDatabaseSpec struct {
	/* An optional list of DDL statements to run inside the newly created
	database. Statements can create tables, indexes, etc. These statements
	execute atomically with the creation of the database: if there is an
	error in any statement, the database is not created. */
	Ddl []string `json:"ddl,omitempty"`
	/* The instance to create the database on. */
	InstanceRef v1alpha1.ResourceRef `json:"instanceRef,omitempty"`
	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
}

type SpannerDatabaseStatus struct {
	/* Conditions represents the latest available observations of the
	   SpannerDatabase's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* An explanation of the status of the database. */
	State string `json:"state,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SpannerDatabase is the Schema for the spanner API
// +k8s:openapi-gen=true
type SpannerDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   SpannerDatabaseSpec   `json:"spec,omitempty"`
	Status SpannerDatabaseStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SpannerDatabaseList contains a list of SpannerDatabase
type SpannerDatabaseList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []SpannerDatabase `json:"items"`
}

func init() {
	SchemeBuilder.Register(&SpannerDatabase{}, &SpannerDatabaseList{})
}
