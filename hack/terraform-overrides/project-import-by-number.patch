# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_project.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_project.go
index d7d49a00..6564930e 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_project.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_project.go
@@ -232,7 +232,10 @@ func resourceGoogleProjectRead(d *schema.ResourceData, meta interface{}) error {
 		return nil
 	}

-	if err := d.Set("project_id", pid); err != nil {
+	// after importing by project number, the id will be a project number, change to project-id so the rest of the logic
+	// in this file can be consistent
+	d.SetId(fmt.Sprintf("projects/%v", p.ProjectId))
+	if err := d.Set("project_id", p.ProjectId); err != nil {
 		return fmt.Errorf("Error setting project_id: %s", err)
 	}
 	if err := d.Set("number", strconv.FormatInt(p.ProjectNumber, 10)); err != nil {
@@ -423,18 +426,25 @@ func resourceGoogleProjectDelete(d *schema.ResourceData, meta interface{}) error
 func resourceProjectImportState(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
 	parts := strings.Split(d.Id(), "/")
 	pid := parts[len(parts)-1]
-	// Prevent importing via project number, this will cause issues later
 	matched, err := regexp.MatchString("^\\d+$", pid)
 	if err != nil {
 		return nil, fmt.Errorf("Error matching project %q: %s", pid, err)
 	}

 	if matched {
-		return nil, fmt.Errorf("Error importing project %q, please use project_id", pid)
+		// this is actually a project number not a project id
+		if err := d.Set("number", pid); err != nil {
+			return nil, fmt.Errorf("Error setting project number: %s", err)
+		}
+	} else {
+		if err := d.Set("project_id", pid); err != nil {
+			return nil, fmt.Errorf("Error setting project_id: %s", err)
+		}
 	}

 	// Ensure the id format includes projects/
-	d.SetId(fmt.Sprintf("projects/%s", pid))
+	fullProjectId := fmt.Sprintf("projects/%s", pid)
+	d.SetId(fullProjectId)

 	// Explicitly set to default as a workaround for `ImportStateVerify` tests, and so that users
 	// don't see a diff immediately after import.
