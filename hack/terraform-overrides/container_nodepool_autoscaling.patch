# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_container_node_pool.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_container_node_pool.go
index 40b76d61c..e599fe5ec 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_container_node_pool.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_container_node_pool.go
@@ -79,7 +79,7 @@ var schemaNodePool = map[string]*schema.Schema{
 		Type:        schema.TypeList,
 		Optional:    true,
 		MaxItems:    1,
-		Description: `Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.`,
+		Description: `Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage. To disable autoscaling, set minNodeCount and maxNodeCount to 0.`,
 		Elem: &schema.Resource{
 			Schema: map[string]*schema.Schema{
 				"min_node_count": {
@@ -951,14 +951,23 @@ func nodePoolUpdate(d *schema.ResourceData, meta interface{}, nodePoolInfo *Node
 		}
 		if v, ok := d.GetOk(prefix + "autoscaling"); ok {
 			autoscaling := v.([]interface{})[0].(map[string]interface{})
-			update.DesiredNodePoolAutoscaling = &container.NodePoolAutoscaling{
-				Enabled:           true,
-				MinNodeCount:      int64(autoscaling["min_node_count"].(int)),
-				MaxNodeCount:      int64(autoscaling["max_node_count"].(int)),
-				TotalMinNodeCount: int64(autoscaling["total_min_node_count"].(int)),
-				TotalMaxNodeCount: int64(autoscaling["total_max_node_count"].(int)),
-				LocationPolicy:    autoscaling["location_policy"].(string),
-				ForceSendFields:   []string{"MinNodeCount", "TotalMinNodeCount"},
+			// disable autoscaling if both min/max node counts are set to 0
+			minNodeCount := autoscaling["min_node_count"].(int)
+			maxNodeCount := autoscaling["max_node_count"].(int)
+			if (minNodeCount == 0) && (maxNodeCount == 0) {
+				update.DesiredNodePoolAutoscaling = &container.NodePoolAutoscaling{
+					Enabled: false,
+				}
+			} else {
+				update.DesiredNodePoolAutoscaling = &container.NodePoolAutoscaling{
+					Enabled:           true,
+					MinNodeCount:      int64(minNodeCount),
+					MaxNodeCount:      int64(maxNodeCount),
+					TotalMinNodeCount: int64(autoscaling["total_min_node_count"].(int)),
+					TotalMaxNodeCount: int64(autoscaling["total_max_node_count"].(int)),
+					LocationPolicy:    autoscaling["location_policy"].(string),
+					ForceSendFields:   []string{"MinNodeCount", "TotalMinNodeCount"},
+				}
 			}
 		} else {
 			update.DesiredNodePoolAutoscaling = &container.NodePoolAutoscaling{
