diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/provider/provider.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/provider/provider.go
index d9af74a0f..3acc6042d 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/provider/provider.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/provider/provider.go
@@ -1158,6 +1158,7 @@ func ResourceMapWithErrors() (map[string]*schema.Resource, error) {
 			"google_alloydb_backup":                                          alloydb.ResourceAlloydbBackup(),
 			"google_alloydb_cluster":                                         alloydb.ResourceAlloydbCluster(),
 			"google_alloydb_instance":                                        alloydb.ResourceAlloydbInstance(),
+			"google_alloydb_user":                                            alloydb.ResourceAlloydbUser(),
 			"google_api_gateway_api":                                         apigateway.ResourceApiGatewayApi(),
 			"google_api_gateway_api_iam_binding":                             tpgiamresource.ResourceIamBinding(apigateway.ApiGatewayApiIamSchema, apigateway.ApiGatewayApiIamUpdaterProducer, apigateway.ApiGatewayApiIdParseFunc),
 			"google_api_gateway_api_iam_member":                              tpgiamresource.ResourceIamMember(apigateway.ApiGatewayApiIamSchema, apigateway.ApiGatewayApiIamUpdaterProducer, apigateway.ApiGatewayApiIdParseFunc),
diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/alloydb/resource_alloydb_user.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/alloydb/resource_alloydb_user.go
new file mode 100644
index 000000000..433eb2563
--- /dev/null
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/alloydb/resource_alloydb_user.go
@@ -0,0 +1,348 @@
+// Copyright (c) HashiCorp, Inc.
+// SPDX-License-Identifier: MPL-2.0
+
+// ----------------------------------------------------------------------------
+//
+//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
+//
+// ----------------------------------------------------------------------------
+//
+//     This file is automatically generated by Magic Modules and manual
+//     changes will be clobbered when the file is regenerated.
+//
+//     Please read more about how to change this file in
+//     .github/CONTRIBUTING.md.
+//
+// ----------------------------------------------------------------------------
+
+package alloydb
+
+import (
+	"fmt"
+	"log"
+	"reflect"
+	"time"
+
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
+
+	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
+	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
+	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"
+)
+
+func ResourceAlloydbUser() *schema.Resource {
+	return &schema.Resource{
+		Create: resourceAlloydbUserCreate,
+		Read:   resourceAlloydbUserRead,
+		Update: resourceAlloydbUserUpdate,
+		Delete: resourceAlloydbUserDelete,
+
+		Importer: &schema.ResourceImporter{
+			State: resourceAlloydbUserImport,
+		},
+
+		Timeouts: &schema.ResourceTimeout{
+			Create: schema.DefaultTimeout(20 * time.Minute),
+			Update: schema.DefaultTimeout(20 * time.Minute),
+			Delete: schema.DefaultTimeout(20 * time.Minute),
+		},
+
+		Schema: map[string]*schema.Schema{
+			"cluster": {
+				Type:             schema.TypeString,
+				Required:         true,
+				ForceNew:         true,
+				DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
+				Description: `Identifies the alloydb cluster. Must be in the format
+'projects/{project}/locations/{location}/clusters/{cluster_id}'`,
+			},
+			"user_id": {
+				Type:        schema.TypeString,
+				Required:    true,
+				ForceNew:    true,
+				Description: `The database role name of the user.`,
+			},
+			"user_type": {
+				Type:         schema.TypeString,
+				Required:     true,
+				ForceNew:     true,
+				ValidateFunc: verify.ValidateEnum([]string{"ALLOYDB_BUILT_IN", "ALLOYDB_IAM_USER"}),
+				Description:  `The type of this user. Possible values: ["ALLOYDB_BUILT_IN", "ALLOYDB_IAM_USER"]`,
+			},
+			"database_roles": {
+				Type:        schema.TypeList,
+				Optional:    true,
+				Description: `List of database roles this database user has.`,
+				Elem: &schema.Schema{
+					Type: schema.TypeString,
+				},
+			},
+			"password": {
+				Type:        schema.TypeString,
+				Optional:    true,
+				Sensitive:   true,
+				Description: `Password for this database user.`,
+			},
+			"name": {
+				Type:        schema.TypeString,
+				Computed:    true,
+				Description: `Name of the resource in the form of projects/{project}/locations/{location}/clusters/{cluster}/users/{user}.`,
+			},
+		},
+		UseJSONNumber: true,
+	}
+}
+
+func resourceAlloydbUserCreate(d *schema.ResourceData, meta interface{}) error {
+	config := meta.(*transport_tpg.Config)
+	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
+	if err != nil {
+		return err
+	}
+
+	obj := make(map[string]interface{})
+	passwordProp, err := expandAlloydbUserPassword(d.Get("password"), d, config)
+	if err != nil {
+		return err
+	} else if v, ok := d.GetOkExists("password"); !tpgresource.IsEmptyValue(reflect.ValueOf(passwordProp)) && (ok || !reflect.DeepEqual(v, passwordProp)) {
+		obj["password"] = passwordProp
+	}
+	databaseRolesProp, err := expandAlloydbUserDatabaseRoles(d.Get("database_roles"), d, config)
+	if err != nil {
+		return err
+	} else if v, ok := d.GetOkExists("database_roles"); !tpgresource.IsEmptyValue(reflect.ValueOf(databaseRolesProp)) && (ok || !reflect.DeepEqual(v, databaseRolesProp)) {
+		obj["databaseRoles"] = databaseRolesProp
+	}
+	userTypeProp, err := expandAlloydbUserUserType(d.Get("user_type"), d, config)
+	if err != nil {
+		return err
+	} else if v, ok := d.GetOkExists("user_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(userTypeProp)) && (ok || !reflect.DeepEqual(v, userTypeProp)) {
+		obj["userType"] = userTypeProp
+	}
+
+	url, err := tpgresource.ReplaceVars(d, config, "{{AlloydbBasePath}}{{cluster}}/users?userId={{user_id}}")
+	if err != nil {
+		return err
+	}
+
+	log.Printf("[DEBUG] Creating new User: %#v", obj)
+	billingProject := ""
+
+	// err == nil indicates that the billing_project value was found
+	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
+		billingProject = bp
+	}
+
+	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
+		Config:    config,
+		Method:    "POST",
+		Project:   billingProject,
+		RawURL:    url,
+		UserAgent: userAgent,
+		Body:      obj,
+		Timeout:   d.Timeout(schema.TimeoutCreate),
+	})
+	if err != nil {
+		return fmt.Errorf("Error creating User: %s", err)
+	}
+	if err := d.Set("name", flattenAlloydbUserName(res["name"], d, config)); err != nil {
+		return fmt.Errorf(`Error setting computed identity field "name": %s`, err)
+	}
+
+	// Store the ID now
+	id, err := tpgresource.ReplaceVars(d, config, "{{cluster}}/users/{{user_id}}")
+	if err != nil {
+		return fmt.Errorf("Error constructing id: %s", err)
+	}
+	d.SetId(id)
+
+	log.Printf("[DEBUG] Finished creating User %q: %#v", d.Id(), res)
+
+	return resourceAlloydbUserRead(d, meta)
+}
+
+func resourceAlloydbUserRead(d *schema.ResourceData, meta interface{}) error {
+	config := meta.(*transport_tpg.Config)
+	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
+	if err != nil {
+		return err
+	}
+
+	url, err := tpgresource.ReplaceVars(d, config, "{{AlloydbBasePath}}{{cluster}}/users/{{user_id}}")
+	if err != nil {
+		return err
+	}
+
+	billingProject := ""
+
+	// err == nil indicates that the billing_project value was found
+	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
+		billingProject = bp
+	}
+
+	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
+		Config:    config,
+		Method:    "GET",
+		Project:   billingProject,
+		RawURL:    url,
+		UserAgent: userAgent,
+	})
+	if err != nil {
+		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("AlloydbUser %q", d.Id()))
+	}
+
+	if err := d.Set("name", flattenAlloydbUserName(res["name"], d, config)); err != nil {
+		return fmt.Errorf("Error reading User: %s", err)
+	}
+	if err := d.Set("database_roles", flattenAlloydbUserDatabaseRoles(res["databaseRoles"], d, config)); err != nil {
+		return fmt.Errorf("Error reading User: %s", err)
+	}
+	if err := d.Set("user_type", flattenAlloydbUserUserType(res["userType"], d, config)); err != nil {
+		return fmt.Errorf("Error reading User: %s", err)
+	}
+
+	return nil
+}
+
+func resourceAlloydbUserUpdate(d *schema.ResourceData, meta interface{}) error {
+	config := meta.(*transport_tpg.Config)
+	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
+	if err != nil {
+		return err
+	}
+
+	billingProject := ""
+
+	obj := make(map[string]interface{})
+	passwordProp, err := expandAlloydbUserPassword(d.Get("password"), d, config)
+	if err != nil {
+		return err
+	} else if v, ok := d.GetOkExists("password"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, passwordProp)) {
+		obj["password"] = passwordProp
+	}
+	databaseRolesProp, err := expandAlloydbUserDatabaseRoles(d.Get("database_roles"), d, config)
+	if err != nil {
+		return err
+	} else if v, ok := d.GetOkExists("database_roles"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, databaseRolesProp)) {
+		obj["databaseRoles"] = databaseRolesProp
+	}
+	userTypeProp, err := expandAlloydbUserUserType(d.Get("user_type"), d, config)
+	if err != nil {
+		return err
+	} else if v, ok := d.GetOkExists("user_type"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, userTypeProp)) {
+		obj["userType"] = userTypeProp
+	}
+
+	url, err := tpgresource.ReplaceVars(d, config, "{{AlloydbBasePath}}{{cluster}}/users?userId={{user_id}}")
+	if err != nil {
+		return err
+	}
+
+	log.Printf("[DEBUG] Updating User %q: %#v", d.Id(), obj)
+
+	// err == nil indicates that the billing_project value was found
+	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
+		billingProject = bp
+	}
+
+	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
+		Config:    config,
+		Method:    "POST",
+		Project:   billingProject,
+		RawURL:    url,
+		UserAgent: userAgent,
+		Body:      obj,
+		Timeout:   d.Timeout(schema.TimeoutUpdate),
+	})
+
+	if err != nil {
+		return fmt.Errorf("Error updating User %q: %s", d.Id(), err)
+	} else {
+		log.Printf("[DEBUG] Finished updating User %q: %#v", d.Id(), res)
+	}
+
+	return resourceAlloydbUserRead(d, meta)
+}
+
+func resourceAlloydbUserDelete(d *schema.ResourceData, meta interface{}) error {
+	config := meta.(*transport_tpg.Config)
+	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
+	if err != nil {
+		return err
+	}
+
+	billingProject := ""
+
+	url, err := tpgresource.ReplaceVars(d, config, "{{AlloydbBasePath}}{{cluster}}/users/{{user_id}}")
+	if err != nil {
+		return err
+	}
+
+	var obj map[string]interface{}
+	log.Printf("[DEBUG] Deleting User %q", d.Id())
+
+	// err == nil indicates that the billing_project value was found
+	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
+		billingProject = bp
+	}
+
+	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
+		Config:    config,
+		Method:    "DELETE",
+		Project:   billingProject,
+		RawURL:    url,
+		UserAgent: userAgent,
+		Body:      obj,
+		Timeout:   d.Timeout(schema.TimeoutDelete),
+	})
+	if err != nil {
+		return transport_tpg.HandleNotFoundError(err, d, "User")
+	}
+
+	log.Printf("[DEBUG] Finished deleting User %q: %#v", d.Id(), res)
+	return nil
+}
+
+func resourceAlloydbUserImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
+	config := meta.(*transport_tpg.Config)
+
+	// current import_formats can't import fields with forward slashes in their value
+	if err := tpgresource.ParseImportId([]string{
+		"(?P<cluster>.+)/users/(?P<user_id>[^/]+)",
+	}, d, config); err != nil {
+		return nil, err
+	}
+
+	// Replace import id for the resource id
+	id, err := tpgresource.ReplaceVars(d, config, "{{cluster}}/users/{{user_id}}")
+	if err != nil {
+		return nil, fmt.Errorf("Error constructing id: %s", err)
+	}
+	d.SetId(id)
+
+	return []*schema.ResourceData{d}, nil
+}
+
+func flattenAlloydbUserName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
+	return v
+}
+
+func flattenAlloydbUserDatabaseRoles(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
+	return v
+}
+
+func flattenAlloydbUserUserType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
+	return v
+}
+
+func expandAlloydbUserPassword(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
+	return v, nil
+}
+
+func expandAlloydbUserDatabaseRoles(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
+	return v, nil
+}
+
+func expandAlloydbUserUserType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
+	return v, nil
+}
diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/alloydb/resource_alloydb_user_generated_test.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/alloydb/resource_alloydb_user_generated_test.go
new file mode 100644
index 000000000..81eb088a6
--- /dev/null
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/alloydb/resource_alloydb_user_generated_test.go
@@ -0,0 +1,194 @@
+// Copyright (c) HashiCorp, Inc.
+// SPDX-License-Identifier: MPL-2.0
+
+// ----------------------------------------------------------------------------
+//
+//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
+//
+// ----------------------------------------------------------------------------
+//
+//     This file is automatically generated by Magic Modules and manual
+//     changes will be clobbered when the file is regenerated.
+//
+//     Please read more about how to change this file in
+//     .github/CONTRIBUTING.md.
+//
+// ----------------------------------------------------------------------------
+
+package alloydb_test
+
+import (
+	"fmt"
+	"strings"
+	"testing"
+
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
+	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
+
+	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
+	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
+	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
+)
+
+func TestAccAlloydbUser_alloydbUserBuiltinTestExample(t *testing.T) {
+	t.Parallel()
+
+	context := map[string]interface{}{
+		"network_name":  acctest.BootstrapSharedServiceNetworkingConnection(t, "alloydbinstance-network-config-1"),
+		"random_suffix": acctest.RandString(t, 10),
+	}
+
+	acctest.VcrTest(t, resource.TestCase{
+		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
+		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
+		CheckDestroy:             testAccCheckAlloydbUserDestroyProducer(t),
+		Steps: []resource.TestStep{
+			{
+				Config: testAccAlloydbUser_alloydbUserBuiltinTestExample(context),
+			},
+			{
+				ResourceName:            "google_alloydb_user.user1",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{"password", "cluster", "user_id", "password"},
+			},
+		},
+	})
+}
+
+func testAccAlloydbUser_alloydbUserBuiltinTestExample(context map[string]interface{}) string {
+	return acctest.Nprintf(`
+resource "google_alloydb_instance" "default" {
+  cluster       = google_alloydb_cluster.default.name
+  instance_id   = "tf-test-alloydb-instance%{random_suffix}"
+  instance_type = "PRIMARY"
+}
+
+resource "google_alloydb_cluster" "default" {
+  cluster_id = "tf-test-alloydb-cluster%{random_suffix}"
+  location   = "us-central1"
+  network    = data.google_compute_network.default.id
+
+  initial_user {
+    password = "tf_test_cluster_secret%{random_suffix}"
+  }
+}
+
+data "google_project" "project" {}
+
+data "google_compute_network" "default" {
+  name = "%{network_name}"
+}
+
+
+resource "google_alloydb_user" "user1" {
+  cluster = google_alloydb_cluster.default.name
+  user_id = "user1%{random_suffix}"
+  user_type = "ALLOYDB_BUILT_IN"
+
+  password = "tf_test_user_secret%{random_suffix}"
+  database_roles = ["alloydbsuperuser"]
+  depends_on = [google_alloydb_instance.default]
+}
+`, context)
+}
+
+func TestAccAlloydbUser_alloydbUserIamTestExample(t *testing.T) {
+	t.Parallel()
+
+	context := map[string]interface{}{
+		"network_name":  acctest.BootstrapSharedServiceNetworkingConnection(t, "alloydbinstance-network-config-1"),
+		"random_suffix": acctest.RandString(t, 10),
+	}
+
+	acctest.VcrTest(t, resource.TestCase{
+		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
+		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
+		CheckDestroy:             testAccCheckAlloydbUserDestroyProducer(t),
+		Steps: []resource.TestStep{
+			{
+				Config: testAccAlloydbUser_alloydbUserIamTestExample(context),
+			},
+			{
+				ResourceName:            "google_alloydb_user.user2",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{"password", "cluster", "user_id"},
+			},
+		},
+	})
+}
+
+func testAccAlloydbUser_alloydbUserIamTestExample(context map[string]interface{}) string {
+	return acctest.Nprintf(`
+resource "google_alloydb_instance" "default" {
+  cluster       = google_alloydb_cluster.default.name
+  instance_id   = "tf-test-alloydb-instance%{random_suffix}"
+  instance_type = "PRIMARY"
+}
+
+resource "google_alloydb_cluster" "default" {
+  cluster_id = "tf-test-alloydb-cluster%{random_suffix}"
+  location   = "us-central1"
+  network    = data.google_compute_network.default.id
+
+  initial_user {
+    password = "tf_test_cluster_secret%{random_suffix}"
+  }
+}
+
+data "google_project" "project" {}
+
+data "google_compute_network" "default" {
+  name = "%{network_name}"
+}
+
+resource "google_alloydb_user" "user2" {
+  cluster = google_alloydb_cluster.default.name
+  user_id = "user2@foo.com%{random_suffix}"
+  user_type = "ALLOYDB_IAM_USER"
+
+  database_roles = ["alloydbiamuser"]
+  depends_on = [google_alloydb_instance.default]
+}
+`, context)
+}
+
+func testAccCheckAlloydbUserDestroyProducer(t *testing.T) func(s *terraform.State) error {
+	return func(s *terraform.State) error {
+		for name, rs := range s.RootModule().Resources {
+			if rs.Type != "google_alloydb_user" {
+				continue
+			}
+			if strings.HasPrefix(name, "data.") {
+				continue
+			}
+
+			config := acctest.GoogleProviderConfig(t)
+
+			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{AlloydbBasePath}}{{cluster}}/users/{{user_id}}")
+			if err != nil {
+				return err
+			}
+
+			billingProject := ""
+
+			if config.BillingProject != "" {
+				billingProject = config.BillingProject
+			}
+
+			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
+				Config:    config,
+				Method:    "GET",
+				Project:   billingProject,
+				RawURL:    url,
+				UserAgent: config.UserAgent,
+			})
+			if err == nil {
+				return fmt.Errorf("AlloydbUser still exists at %s", url)
+			}
+		}
+
+		return nil
+	}
+}
diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/alloydb/resource_alloydb_user_test.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/alloydb/resource_alloydb_user_test.go
new file mode 100644
index 000000000..5e024c82c
--- /dev/null
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/alloydb/resource_alloydb_user_test.go
@@ -0,0 +1,213 @@
+// Copyright (c) HashiCorp, Inc.
+// SPDX-License-Identifier: MPL-2.0
+package alloydb_test
+
+import (
+	"testing"
+
+	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
+	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
+)
+
+func TestAccAlloydbUser_updateRoles_BuiltIn(t *testing.T) {
+	t.Parallel()
+
+	context := map[string]interface{}{
+		"network_name":  acctest.BootstrapSharedServiceNetworkingConnection(t, "alloydbinstance-network-config-1"),
+		"random_suffix": acctest.RandString(t, 10),
+	}
+
+	acctest.VcrTest(t, resource.TestCase{
+		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
+		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
+		CheckDestroy:             testAccCheckAlloydbUserDestroyProducer(t),
+		Steps: []resource.TestStep{
+			{
+				Config: testAccAlloydbUser_alloydbUserBuiltinTestExample(context),
+			},
+			{
+				ResourceName:            "google_alloydb_user.user1",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{"password"},
+			},
+			{
+				Config: testAccAlloydbUser_updateRoles_BuiltIn(context),
+			},
+			{
+				ResourceName:            "google_alloydb_user.user1",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{"password"},
+			},
+		},
+	})
+}
+
+func testAccAlloydbUser_updateRoles_BuiltIn(context map[string]interface{}) string {
+	return acctest.Nprintf(`
+resource "google_alloydb_instance" "default" {
+  cluster       = google_alloydb_cluster.default.name
+  instance_id   = "tf-test-alloydb-instance%{random_suffix}"
+  instance_type = "PRIMARY"
+}
+
+resource "google_alloydb_cluster" "default" {
+  cluster_id = "tf-test-alloydb-cluster%{random_suffix}"
+  location   = "us-central1"
+  network    = data.google_compute_network.default.id
+
+  initial_user {
+    password = "tf_test_cluster_secret%{random_suffix}"
+  }
+}
+
+data "google_project" "project" {}
+
+data "google_compute_network" "default" {
+  name = "%{network_name}"
+}
+
+resource "google_alloydb_user" "user1" {
+  cluster = google_alloydb_cluster.default.name
+  user_id = "user1%{random_suffix}"
+  user_type = "ALLOYDB_BUILT_IN"
+
+  password = "tf_test_user_secret%{random_suffix}"
+  database_roles = []
+  depends_on = [google_alloydb_instance.default]
+}`, context)
+}
+
+func TestAccAlloydbUser_updatePassword_BuiltIn(t *testing.T) {
+	t.Parallel()
+
+	context := map[string]interface{}{
+		"network_name":  acctest.BootstrapSharedServiceNetworkingConnection(t, "alloydbinstance-network-config-1"),
+		"random_suffix": acctest.RandString(t, 10),
+	}
+
+	acctest.VcrTest(t, resource.TestCase{
+		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
+		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
+		CheckDestroy:             testAccCheckAlloydbUserDestroyProducer(t),
+		Steps: []resource.TestStep{
+			{
+				Config: testAccAlloydbUser_alloydbUserBuiltinTestExample(context),
+			},
+			{
+				ResourceName:            "google_alloydb_user.user1",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{"password"},
+			},
+			{
+				Config: testAccAlloydbUser_updatePass_BuiltIn(context),
+			},
+			{
+				ResourceName:            "google_alloydb_user.user1",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{"password"},
+			},
+		},
+	})
+}
+
+func testAccAlloydbUser_updatePass_BuiltIn(context map[string]interface{}) string {
+	return acctest.Nprintf(`
+resource "google_alloydb_instance" "default" {
+  cluster       = google_alloydb_cluster.default.name
+  instance_id   = "tf-test-alloydb-instance%{random_suffix}"
+  instance_type = "PRIMARY"
+}
+
+resource "google_alloydb_cluster" "default" {
+  cluster_id = "tf-test-alloydb-cluster%{random_suffix}"
+  location   = "us-central1"
+  network    = data.google_compute_network.default.id
+
+  initial_user {
+    password = "tf_test_cluster_secret%{random_suffix}"
+  }
+}
+
+data "google_project" "project" {}
+
+data "google_compute_network" "default" {
+  name = "%{network_name}"
+}
+
+resource "google_alloydb_user" "user1" {
+  cluster = google_alloydb_cluster.default.name
+  user_id = "user1%{random_suffix}"
+  user_type = "ALLOYDB_BUILT_IN"
+
+  password = "tf_test_user_secret%{random_suffix}-foo"
+  database_roles = ["alloydbsuperuser"]
+  depends_on = [google_alloydb_instance.default]
+}`, context)
+}
+
+func TestAccAlloydbUser_updateRoles_IAM(t *testing.T) {
+	t.Parallel()
+
+	context := map[string]interface{}{
+		"network_name":  acctest.BootstrapSharedServiceNetworkingConnection(t, "alloydbinstance-network-config-1"),
+		"random_suffix": acctest.RandString(t, 10),
+	}
+
+	acctest.VcrTest(t, resource.TestCase{
+		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
+		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
+		CheckDestroy:             testAccCheckAlloydbUserDestroyProducer(t),
+		Steps: []resource.TestStep{
+			{
+				Config: testAccAlloydbUser_alloydbUserIamTestExample(context),
+			},
+			{
+				ResourceName:            "google_alloydb_user.user2",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{},
+			},
+			{
+				Config: testAccAlloydbUser_updateRoles_Iam(context),
+			},
+			{
+				ResourceName:            "google_alloydb_user.user2",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{},
+			},
+		},
+	})
+}
+
+func testAccAlloydbUser_updateRoles_Iam(context map[string]interface{}) string {
+	return acctest.Nprintf(`
+resource "google_alloydb_instance" "default" {
+  cluster       = google_alloydb_cluster.default.name
+  instance_id   = "tf-test-alloydb-instance%{random_suffix}"
+  instance_type = "PRIMARY"
+}
+resource "google_alloydb_cluster" "default" {
+  cluster_id = "tf-test-alloydb-cluster%{random_suffix}"
+  location   = "us-central1"
+  network    = data.google_compute_network.default.id
+  initial_user {
+    password = "tf_test_cluster_secret%{random_suffix}"
+  }
+}
+data "google_project" "project" {}
+data "google_compute_network" "default" {
+  name = "%{network_name}"
+}
+resource "google_alloydb_user" "user2" {
+  cluster = google_alloydb_cluster.default.name
+  user_id = "user2@foo.com%{random_suffix}"
+  user_type = "ALLOYDB_IAM_USER"
+  database_roles = ["alloydbiamuser", "alloydbsuperuser"]
+  depends_on = [google_alloydb_instance.default]
+}`, context)
+}
