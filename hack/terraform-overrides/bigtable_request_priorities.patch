diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile.go
index 84114e5bb..391c60155 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile.go
@@ -29,6 +29,7 @@ import (
 
 	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
 	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
+	"github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"
 )
 
 func ResourceBigtableAppProfile() *schema.Resource {
@@ -103,6 +104,23 @@ It is unsafe to send these requests to the same table/row/column in multiple clu
 				},
 				ExactlyOneOf: []string{"single_cluster_routing", "multi_cluster_routing_use_any"},
 			},
+			"standard_isolation": {
+				Type:        schema.TypeList,
+				Computed:    true,
+				Optional:    true,
+				Description: `The standard options used for isolating this app profile's traffic from other use cases.`,
+				MaxItems:    1,
+				Elem: &schema.Resource{
+					Schema: map[string]*schema.Schema{
+						"priority": {
+							Type:         schema.TypeString,
+							Required:     true,
+							ValidateFunc: verify.ValidateEnum([]string{"PRIORITY_LOW", "PRIORITY_MEDIUM", "PRIORITY_HIGH"}),
+							Description:  `The priority of requests sent using this app profile. Possible values: ["PRIORITY_LOW", "PRIORITY_MEDIUM", "PRIORITY_HIGH"]`,
+						},
+					},
+				},
+			},
 			"name": {
 				Type:        schema.TypeString,
 				Computed:    true,
@@ -154,6 +172,12 @@ func resourceBigtableAppProfileCreate(d *schema.ResourceData, meta interface{})
 	} else if v, ok := d.GetOkExists("single_cluster_routing"); !tpgresource.IsEmptyValue(reflect.ValueOf(singleClusterRoutingProp)) && (ok || !reflect.DeepEqual(v, singleClusterRoutingProp)) {
 		obj["singleClusterRouting"] = singleClusterRoutingProp
 	}
+	standardIsolationProp, err := expandBigtableAppProfileStandardIsolation(d.Get("standard_isolation"), d, config)
+	if err != nil {
+		return err
+	} else if v, ok := d.GetOkExists("standard_isolation"); !tpgresource.IsEmptyValue(reflect.ValueOf(standardIsolationProp)) && (ok || !reflect.DeepEqual(v, standardIsolationProp)) {
+		obj["standardIsolation"] = standardIsolationProp
+	}
 
 	obj, err = resourceBigtableAppProfileEncoder(d, meta, obj)
 	if err != nil {
@@ -259,6 +283,9 @@ func resourceBigtableAppProfileRead(d *schema.ResourceData, meta interface{}) er
 	if err := d.Set("single_cluster_routing", flattenBigtableAppProfileSingleClusterRouting(res["singleClusterRouting"], d, config)); err != nil {
 		return fmt.Errorf("Error reading AppProfile: %s", err)
 	}
+	if err := d.Set("standard_isolation", flattenBigtableAppProfileStandardIsolation(res["standardIsolation"], d, config)); err != nil {
+		return fmt.Errorf("Error reading AppProfile: %s", err)
+	}
 
 	return nil
 }
@@ -297,6 +324,12 @@ func resourceBigtableAppProfileUpdate(d *schema.ResourceData, meta interface{})
 	} else if v, ok := d.GetOkExists("single_cluster_routing"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, singleClusterRoutingProp)) {
 		obj["singleClusterRouting"] = singleClusterRoutingProp
 	}
+	standardIsolationProp, err := expandBigtableAppProfileStandardIsolation(d.Get("standard_isolation"), d, config)
+	if err != nil {
+		return err
+	} else if v, ok := d.GetOkExists("standard_isolation"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, standardIsolationProp)) {
+		obj["standardIsolation"] = standardIsolationProp
+	}
 
 	obj, err = resourceBigtableAppProfileEncoder(d, meta, obj)
 	if err != nil {
@@ -322,6 +355,10 @@ func resourceBigtableAppProfileUpdate(d *schema.ResourceData, meta interface{})
 	if d.HasChange("single_cluster_routing") {
 		updateMask = append(updateMask, "singleClusterRouting")
 	}
+
+	if d.HasChange("standard_isolation") {
+		updateMask = append(updateMask, "standardIsolation")
+	}
 	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
 	// won't set it
 	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
@@ -493,6 +530,23 @@ func flattenBigtableAppProfileSingleClusterRoutingAllowTransactionalWrites(v int
 	return v
 }
 
+func flattenBigtableAppProfileStandardIsolation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
+	if v == nil {
+		return nil
+	}
+	original := v.(map[string]interface{})
+	if len(original) == 0 {
+		return nil
+	}
+	transformed := make(map[string]interface{})
+	transformed["priority"] =
+		flattenBigtableAppProfileStandardIsolationPriority(original["priority"], d, config)
+	return []interface{}{transformed}
+}
+func flattenBigtableAppProfileStandardIsolationPriority(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
+	return v
+}
+
 func expandBigtableAppProfileDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
 	return v, nil
 }
@@ -547,6 +601,29 @@ func expandBigtableAppProfileSingleClusterRoutingAllowTransactionalWrites(v inte
 	return v, nil
 }
 
+func expandBigtableAppProfileStandardIsolation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
+	l := v.([]interface{})
+	if len(l) == 0 || l[0] == nil {
+		return nil, nil
+	}
+	raw := l[0]
+	original := raw.(map[string]interface{})
+	transformed := make(map[string]interface{})
+
+	transformedPriority, err := expandBigtableAppProfileStandardIsolationPriority(original["priority"], d, config)
+	if err != nil {
+		return nil, err
+	} else if val := reflect.ValueOf(transformedPriority); val.IsValid() && !tpgresource.IsEmptyValue(val) {
+		transformed["priority"] = transformedPriority
+	}
+
+	return transformed, nil
+}
+
+func expandBigtableAppProfileStandardIsolationPriority(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
+	return v, nil
+}
+
 func resourceBigtableAppProfileEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
 	// Instance is a URL parameter only, so replace self-link/path with resource name only.
 	if err := d.Set("instance", tpgresource.GetResourceNameFromSelfLink(d.Get("instance").(string))); err != nil {
diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile_generated_test.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile_generated_test.go
index 07067d414..d836b56a3 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile_generated_test.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile_generated_test.go
@@ -31,6 +31,7 @@ import (
 )
 
 func TestAccBigtableAppProfile_bigtableAppProfileAnyclusterExample(t *testing.T) {
+	acctest.SkipIfVcr(t)
 	t.Parallel()
 
 	context := map[string]interface{}{
@@ -77,7 +78,7 @@ resource "google_bigtable_instance" "instance" {
     zone         = "us-central1-c"
     num_nodes    = 3
     storage_type = "HDD"
-  }  
+  }
 
   deletion_protection  = "%{deletion_protection}"
 }
@@ -95,6 +96,7 @@ resource "google_bigtable_app_profile" "ap" {
 }
 
 func TestAccBigtableAppProfile_bigtableAppProfileSingleclusterExample(t *testing.T) {
+	acctest.SkipIfVcr(t)
 	t.Parallel()
 
 	context := map[string]interface{}{
@@ -150,6 +152,7 @@ resource "google_bigtable_app_profile" "ap" {
 }
 
 func TestAccBigtableAppProfile_bigtableAppProfileMulticlusterExample(t *testing.T) {
+	acctest.SkipIfVcr(t)
 	t.Parallel()
 
 	context := map[string]interface{}{
@@ -214,6 +217,66 @@ resource "google_bigtable_app_profile" "ap" {
 `, context)
 }
 
+func TestAccBigtableAppProfile_bigtableAppProfilePriorityExample(t *testing.T) {
+	acctest.SkipIfVcr(t)
+	t.Parallel()
+
+	context := map[string]interface{}{
+		"deletion_protection": false,
+		"random_suffix":       acctest.RandString(t, 10),
+	}
+
+	acctest.VcrTest(t, resource.TestCase{
+		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
+		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
+		CheckDestroy:             testAccCheckBigtableAppProfileDestroyProducer(t),
+		Steps: []resource.TestStep{
+			{
+				Config: testAccBigtableAppProfile_bigtableAppProfilePriorityExample(context),
+			},
+			{
+				ResourceName:            "google_bigtable_app_profile.ap",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{"app_profile_id", "instance", "ignore_warnings", "ignore_warnings"},
+			},
+		},
+	})
+}
+
+func testAccBigtableAppProfile_bigtableAppProfilePriorityExample(context map[string]interface{}) string {
+	return acctest.Nprintf(`
+resource "google_bigtable_instance" "instance" {
+  name = "tf-test-bt-instance%{random_suffix}"
+  cluster {
+    cluster_id   = "cluster-1"
+    zone         = "us-central1-b"
+    num_nodes    = 3
+    storage_type = "HDD"
+  }
+
+  deletion_protection  = "%{deletion_protection}"
+}
+
+resource "google_bigtable_app_profile" "ap" {
+  instance       = google_bigtable_instance.instance.name
+  app_profile_id = "tf-test-bt-profile%{random_suffix}"
+
+  // Requests will be routed to the following cluster.
+  single_cluster_routing {
+    cluster_id                 = "cluster-1"
+    allow_transactional_writes = true
+  }
+
+  standard_isolation {
+    priority = "PRIORITY_LOW"
+  }
+
+  ignore_warnings = true
+}
+`, context)
+}
+
 func testAccCheckBigtableAppProfileDestroyProducer(t *testing.T) func(s *terraform.State) error {
 	return func(s *terraform.State) error {
 		for name, rs := range s.RootModule().Resources {
diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile_test.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile_test.go
index 1832ca175..9eaf3de1b 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile_test.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/bigtable/resource_bigtable_app_profile_test.go
@@ -40,6 +40,15 @@ func TestAccBigtableAppProfile_update(t *testing.T) {
 				ImportStateVerify:       true,
 				ImportStateVerifyIgnore: []string{"ignore_warnings"},
 			},
+			{
+				Config: testAccBigtableAppProfile_updatePriority(instanceName),
+			},
+			{
+				ResourceName:            "google_bigtable_app_profile.ap",
+				ImportState:             true,
+				ImportStateVerify:       true,
+				ImportStateVerifyIgnore: []string{"ignore_warnings"},
+			},
 		},
 	})
 }
@@ -231,6 +240,53 @@ resource "google_bigtable_app_profile" "ap" {
 `, instanceName, instanceName, instanceName, instanceName, instanceName)
 }
 
+func testAccBigtableAppProfile_updatePriority(instanceName string) string {
+	return fmt.Sprintf(`
+resource "google_bigtable_instance" "instance" {
+  name = "%s"
+  cluster {
+    cluster_id   = "%s"
+    zone         = "us-central1-b"
+    num_nodes    = 1
+    storage_type = "HDD"
+  }
+
+  cluster {
+    cluster_id   = "%s2"
+    zone         = "us-central1-a"
+    num_nodes    = 1
+    storage_type = "HDD"
+  }
+
+  cluster {
+    cluster_id   = "%s3"
+    zone         = "us-central1-c"
+    num_nodes    = 1
+    storage_type = "HDD"
+  }
+
+  deletion_protection = false
+}
+
+resource "google_bigtable_app_profile" "ap" {
+  instance       = google_bigtable_instance.instance.id
+  app_profile_id = "test"
+  description    = "add a description"
+
+  single_cluster_routing {
+    cluster_id                 = %q
+    allow_transactional_writes = false
+  }
+
+  standard_isolation {
+    priority = "PRIORITY_MEDIUM"
+  }
+
+  ignore_warnings               = true
+}
+`, instanceName, instanceName, instanceName, instanceName, instanceName)
+}
+
 func testAccBigtableAppProfile_warningsProduced(instanceName string) string {
 	return fmt.Sprintf(`
 resource "google_bigtable_instance" "instance" {
