# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_folder.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_folder.go
index fac0d24c3..a282bdc19 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_folder.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_folder.go
@@ -2,6 +2,7 @@ package google
 
 import (
 	"encoding/json"
+	"errors"
 	"fmt"
 	"log"
 	"strings"
@@ -11,6 +12,8 @@ import (
 	resourceManagerV2 "google.golang.org/api/cloudresourcemanager/v2"
 )
 
+var activeFolderNotFoundError = errors.New("active folder not found")
+
 func resourceGoogleFolder() *schema.Resource {
 	return &schema.Resource{
 		Create: resourceGoogleFolderCreate,
@@ -86,6 +89,19 @@ func resourceGoogleFolderCreate(d *schema.ResourceData, meta interface{}) error
 		return fmt.Errorf("Error getting parent for folder '%s': %s", displayName, err)
 	}
 
+	// Check if there's an ACTIVE folder with the given display_name in the
+	// given parent first before trying to create a new folder. This allows
+	// users to acquire existing folders by specifying the folder's
+	// display_name and parent.
+	folder, err := getActiveFolderByDisplayName(displayName, parent, userAgent, config)
+	if err != nil && !errors.Is(err, activeFolderNotFoundError) {
+		return fmt.Errorf("Error checking if folder '%s' in '%s' exists: %s", displayName, parent, err)
+	} else if err == nil {
+		// An ACTIVE folder with the given display_name in the given parent is found.
+		d.SetId(folder.Name)
+		return resourceGoogleFolderRead(d, meta)
+	}
+
 	var op *resourceManagerV2.Operation
 	err = retryTimeDuration(func() error {
 		var reqErr error
@@ -280,6 +296,30 @@ func getGoogleFolder(folderName, userAgent string, d *schema.ResourceData, confi
 	return folder, nil
 }
 
+func getActiveFolderByDisplayName(displayName, parent, userAgent string, config *Config) (*resourceManagerV2.Folder, error) {
+	pageToken := ""
+	for ok := true; ok; ok = pageToken != "" {
+		searchRequest := &resourceManagerV2.SearchFoldersRequest{
+			Query:     fmt.Sprintf("lifecycleState=ACTIVE AND parent=%s AND displayName=\"%s\"", parent, displayName),
+			PageToken: pageToken,
+		}
+		searchResponse, err := config.NewResourceManagerV2Client(userAgent).Folders.Search(searchRequest).Do()
+		if err != nil {
+			if isGoogleApiErrorWithCode(err, 404) {
+				return nil, activeFolderNotFoundError
+			}
+			return nil, err
+		}
+		for _, folder := range searchResponse.Folders {
+			if folder.DisplayName == displayName {
+				return folder, nil
+			}
+		}
+		pageToken = searchResponse.NextPageToken
+	}
+	return nil, activeFolderNotFoundError
+}
+
 func getParentID(d *schema.ResourceData) (string, error) {
 	orgId := d.Get("parent_org_id").(string)
 	folderId := d.Get("parent_folder_id").(string)
