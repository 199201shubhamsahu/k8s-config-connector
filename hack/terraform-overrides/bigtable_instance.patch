diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_bigtable_instance.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_bigtable_instance.go
index b458f8d5e..0fc63ca37 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_bigtable_instance.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_bigtable_instance.go
@@ -4,6 +4,7 @@ import (
 	"context"
 	"fmt"
 	"log"
+	"strings"
 
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -58,6 +59,7 @@ func ResourceBigtableInstance() *schema.Resource {
 						},
 						"zone": {
 							Type:        schema.TypeString,
+							Required:    true,
 							Computed:    true,
 							Optional:    true,
 							Description: `The zone to create the Cloud Bigtable cluster in. Each cluster must have a different zone in the same region. Zones that support Bigtable instances are noted on the Cloud Bigtable locations page.`,
@@ -135,10 +137,11 @@ func ResourceBigtableInstance() *schema.Resource {
 			},
 
 			"deletion_protection": {
-				Type:        schema.TypeBool,
-				Optional:    true,
-				Default:     true,
-				Description: `Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a terraform destroy or terraform apply that would delete the instance will fail.`,
+				Type:             schema.TypeBool,
+				Optional:         true,
+				Default:          false,
+				DiffSuppressFunc: bigtableInstanceDeletionProtectionDiffSuppress,
+				Deprecated:       "This field no longer serves any function and is intended to be dropped in a later version of the resource.",
 			},
 
 			"labels": {
@@ -257,9 +260,29 @@ func resourceBigtableInstanceRead(d *schema.ResourceData, meta interface{}) erro
 		return fmt.Errorf("Error setting project: %s", err)
 	}
 
+	var instanceType string
+	if instance.InstanceType == bigtable.DEVELOPMENT {
+		instanceType = "DEVELOPMENT"
+	} else {
+		instanceType = "PRODUCTION"
+	}
+	if err := d.Set("instance_type", instanceType); err != nil {
+		return fmt.Errorf("Error setting instance_type: %s", err)
+	}
+
 	clusters, err := c.Clusters(ctx, instance.Name)
 	if err != nil {
-		return fmt.Errorf("Error retrieving instance clusters. %s", err)
+		partiallyUnavailableErr, ok := err.(bigtable.ErrPartiallyUnavailable)
+
+		if !ok {
+			return fmt.Errorf("Error retrieving instance clusters. %s", err)
+		}
+
+		unavailableClusterZones := getUnavailableClusterZones(d.Get("cluster").([]interface{}), partiallyUnavailableErr.Locations)
+
+		if len(unavailableClusterZones) > 0 {
+			return fmt.Errorf("Error retrieving instance clusters. The following zones are unavailable: %s", strings.Join(unavailableClusterZones, ", "))
+		}
 	}
 
 	clustersNewState := []map[string]interface{}{}
@@ -282,8 +305,6 @@ func resourceBigtableInstanceRead(d *schema.ResourceData, meta interface{}) erro
 	if err := d.Set("labels", instance.Labels); err != nil {
 		return fmt.Errorf("Error setting labels: %s", err)
 	}
-	// Don't set instance_type: we don't want to detect drift on it because it can
-	// change under-the-hood.
 
 	return nil
 }
@@ -342,9 +363,6 @@ func resourceBigtableInstanceUpdate(d *schema.ResourceData, meta interface{}) er
 }
 
 func resourceBigtableInstanceDestroy(d *schema.ResourceData, meta interface{}) error {
-	if d.Get("deletion_protection").(bool) {
-		return fmt.Errorf("cannot destroy instance without setting deletion_protection=false and running `terraform apply`")
-	}
 	config := meta.(*Config)
 	userAgent, err := generateUserAgentString(d, config.UserAgent)
 	if err != nil {
@@ -404,6 +422,23 @@ func flattenBigtableCluster(c *bigtable.ClusterInfo) map[string]interface{} {
 	return cluster
 }
 
+func getUnavailableClusterZones(clusters []interface{}, unavailableZones []string) []string {
+	var zones []string
+
+	for _, c := range clusters {
+		cluster := c.(map[string]interface{})
+		zone := cluster["zone"].(string)
+
+		for _, unavailableZone := range unavailableZones {
+			if zone == unavailableZone {
+				zones = append(zones, zone)
+				break
+			}
+		}
+	}
+	return zones
+}
+
 func expandBigtableClusters(clusters []interface{}, instanceID string, config *Config) ([]bigtable.ClusterConfig, error) {
 	results := make([]bigtable.ClusterConfig, 0, len(clusters))
 	for _, c := range clusters {
@@ -594,3 +629,10 @@ func resourceBigtableInstanceImport(d *schema.ResourceData, meta interface{}) ([
 
 	return []*schema.ResourceData{d}, nil
 }
+
+func bigtableInstanceDeletionProtectionDiffSuppress(_, _, _ string, _ *schema.ResourceData) bool {
+	// Always suppress diffs for "deletion_protection" since the field no
+	// longer serves any purpose, and the intention is to remove it from the
+	// resource in the future.
+	return true
+}
