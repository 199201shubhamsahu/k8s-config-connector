// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/gkemulticloud/v1/aws_service.proto

package gkemulticloudpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AwsClustersClient is the client API for AwsClusters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwsClustersClient interface {
	// Creates a new [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster]
	// resource on a given Google Cloud Platform project and region.
	//
	// If successful, the response contains a newly created
	// [Operation][google.longrunning.Operation] resource that can be
	// described to track the status of the operation.
	CreateAwsCluster(ctx context.Context, in *CreateAwsClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates an [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster].
	UpdateAwsCluster(ctx context.Context, in *UpdateAwsClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Describes a specific [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster]
	// resource.
	GetAwsCluster(ctx context.Context, in *GetAwsClusterRequest, opts ...grpc.CallOption) (*AwsCluster, error)
	// Lists all [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster] resources
	// on a given Google Cloud project and region.
	ListAwsClusters(ctx context.Context, in *ListAwsClustersRequest, opts ...grpc.CallOption) (*ListAwsClustersResponse, error)
	// Deletes a specific [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster]
	// resource.
	//
	// Fails if the cluster has one or more associated
	// [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool] resources.
	//
	// If successful, the response contains a newly created
	// [Operation][google.longrunning.Operation] resource that can be
	// described to track the status of the operation.
	DeleteAwsCluster(ctx context.Context, in *DeleteAwsClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Generates a short-lived access token to authenticate to a given
	// [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster] resource.
	GenerateAwsAccessToken(ctx context.Context, in *GenerateAwsAccessTokenRequest, opts ...grpc.CallOption) (*GenerateAwsAccessTokenResponse, error)
	// Creates a new [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool],
	// attached to a given [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster].
	//
	// If successful, the response contains a newly created
	// [Operation][google.longrunning.Operation] resource that can be
	// described to track the status of the operation.
	CreateAwsNodePool(ctx context.Context, in *CreateAwsNodePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates an [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool].
	UpdateAwsNodePool(ctx context.Context, in *UpdateAwsNodePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Describes a specific
	// [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool] resource.
	GetAwsNodePool(ctx context.Context, in *GetAwsNodePoolRequest, opts ...grpc.CallOption) (*AwsNodePool, error)
	// Lists all [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool]
	// resources on a given
	// [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster].
	ListAwsNodePools(ctx context.Context, in *ListAwsNodePoolsRequest, opts ...grpc.CallOption) (*ListAwsNodePoolsResponse, error)
	// Deletes a specific [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool]
	// resource.
	//
	// If successful, the response contains a newly created
	// [Operation][google.longrunning.Operation] resource that can be
	// described to track the status of the operation.
	DeleteAwsNodePool(ctx context.Context, in *DeleteAwsNodePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns information, such as supported AWS regions and Kubernetes
	// versions, on a given Google Cloud location.
	GetAwsServerConfig(ctx context.Context, in *GetAwsServerConfigRequest, opts ...grpc.CallOption) (*AwsServerConfig, error)
}

type awsClustersClient struct {
	cc grpc.ClientConnInterface
}

func NewAwsClustersClient(cc grpc.ClientConnInterface) AwsClustersClient {
	return &awsClustersClient{cc}
}

func (c *awsClustersClient) CreateAwsCluster(ctx context.Context, in *CreateAwsClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/CreateAwsCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) UpdateAwsCluster(ctx context.Context, in *UpdateAwsClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/UpdateAwsCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) GetAwsCluster(ctx context.Context, in *GetAwsClusterRequest, opts ...grpc.CallOption) (*AwsCluster, error) {
	out := new(AwsCluster)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/GetAwsCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) ListAwsClusters(ctx context.Context, in *ListAwsClustersRequest, opts ...grpc.CallOption) (*ListAwsClustersResponse, error) {
	out := new(ListAwsClustersResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/ListAwsClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) DeleteAwsCluster(ctx context.Context, in *DeleteAwsClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/DeleteAwsCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) GenerateAwsAccessToken(ctx context.Context, in *GenerateAwsAccessTokenRequest, opts ...grpc.CallOption) (*GenerateAwsAccessTokenResponse, error) {
	out := new(GenerateAwsAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/GenerateAwsAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) CreateAwsNodePool(ctx context.Context, in *CreateAwsNodePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/CreateAwsNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) UpdateAwsNodePool(ctx context.Context, in *UpdateAwsNodePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/UpdateAwsNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) GetAwsNodePool(ctx context.Context, in *GetAwsNodePoolRequest, opts ...grpc.CallOption) (*AwsNodePool, error) {
	out := new(AwsNodePool)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/GetAwsNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) ListAwsNodePools(ctx context.Context, in *ListAwsNodePoolsRequest, opts ...grpc.CallOption) (*ListAwsNodePoolsResponse, error) {
	out := new(ListAwsNodePoolsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/ListAwsNodePools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) DeleteAwsNodePool(ctx context.Context, in *DeleteAwsNodePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/DeleteAwsNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsClustersClient) GetAwsServerConfig(ctx context.Context, in *GetAwsServerConfigRequest, opts ...grpc.CallOption) (*AwsServerConfig, error) {
	out := new(AwsServerConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/GetAwsServerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AwsClustersServer is the server API for AwsClusters service.
// All implementations must embed UnimplementedAwsClustersServer
// for forward compatibility
type AwsClustersServer interface {
	// Creates a new [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster]
	// resource on a given Google Cloud Platform project and region.
	//
	// If successful, the response contains a newly created
	// [Operation][google.longrunning.Operation] resource that can be
	// described to track the status of the operation.
	CreateAwsCluster(context.Context, *CreateAwsClusterRequest) (*longrunningpb.Operation, error)
	// Updates an [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster].
	UpdateAwsCluster(context.Context, *UpdateAwsClusterRequest) (*longrunningpb.Operation, error)
	// Describes a specific [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster]
	// resource.
	GetAwsCluster(context.Context, *GetAwsClusterRequest) (*AwsCluster, error)
	// Lists all [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster] resources
	// on a given Google Cloud project and region.
	ListAwsClusters(context.Context, *ListAwsClustersRequest) (*ListAwsClustersResponse, error)
	// Deletes a specific [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster]
	// resource.
	//
	// Fails if the cluster has one or more associated
	// [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool] resources.
	//
	// If successful, the response contains a newly created
	// [Operation][google.longrunning.Operation] resource that can be
	// described to track the status of the operation.
	DeleteAwsCluster(context.Context, *DeleteAwsClusterRequest) (*longrunningpb.Operation, error)
	// Generates a short-lived access token to authenticate to a given
	// [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster] resource.
	GenerateAwsAccessToken(context.Context, *GenerateAwsAccessTokenRequest) (*GenerateAwsAccessTokenResponse, error)
	// Creates a new [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool],
	// attached to a given [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster].
	//
	// If successful, the response contains a newly created
	// [Operation][google.longrunning.Operation] resource that can be
	// described to track the status of the operation.
	CreateAwsNodePool(context.Context, *CreateAwsNodePoolRequest) (*longrunningpb.Operation, error)
	// Updates an [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool].
	UpdateAwsNodePool(context.Context, *UpdateAwsNodePoolRequest) (*longrunningpb.Operation, error)
	// Describes a specific
	// [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool] resource.
	GetAwsNodePool(context.Context, *GetAwsNodePoolRequest) (*AwsNodePool, error)
	// Lists all [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool]
	// resources on a given
	// [AwsCluster][mockgcp.cloud.gkemulticloud.v1.AwsCluster].
	ListAwsNodePools(context.Context, *ListAwsNodePoolsRequest) (*ListAwsNodePoolsResponse, error)
	// Deletes a specific [AwsNodePool][mockgcp.cloud.gkemulticloud.v1.AwsNodePool]
	// resource.
	//
	// If successful, the response contains a newly created
	// [Operation][google.longrunning.Operation] resource that can be
	// described to track the status of the operation.
	DeleteAwsNodePool(context.Context, *DeleteAwsNodePoolRequest) (*longrunningpb.Operation, error)
	// Returns information, such as supported AWS regions and Kubernetes
	// versions, on a given Google Cloud location.
	GetAwsServerConfig(context.Context, *GetAwsServerConfigRequest) (*AwsServerConfig, error)
	mustEmbedUnimplementedAwsClustersServer()
}

// UnimplementedAwsClustersServer must be embedded to have forward compatible implementations.
type UnimplementedAwsClustersServer struct {
}

func (UnimplementedAwsClustersServer) CreateAwsCluster(context.Context, *CreateAwsClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAwsCluster not implemented")
}
func (UnimplementedAwsClustersServer) UpdateAwsCluster(context.Context, *UpdateAwsClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAwsCluster not implemented")
}
func (UnimplementedAwsClustersServer) GetAwsCluster(context.Context, *GetAwsClusterRequest) (*AwsCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsCluster not implemented")
}
func (UnimplementedAwsClustersServer) ListAwsClusters(context.Context, *ListAwsClustersRequest) (*ListAwsClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAwsClusters not implemented")
}
func (UnimplementedAwsClustersServer) DeleteAwsCluster(context.Context, *DeleteAwsClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAwsCluster not implemented")
}
func (UnimplementedAwsClustersServer) GenerateAwsAccessToken(context.Context, *GenerateAwsAccessTokenRequest) (*GenerateAwsAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAwsAccessToken not implemented")
}
func (UnimplementedAwsClustersServer) CreateAwsNodePool(context.Context, *CreateAwsNodePoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAwsNodePool not implemented")
}
func (UnimplementedAwsClustersServer) UpdateAwsNodePool(context.Context, *UpdateAwsNodePoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAwsNodePool not implemented")
}
func (UnimplementedAwsClustersServer) GetAwsNodePool(context.Context, *GetAwsNodePoolRequest) (*AwsNodePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsNodePool not implemented")
}
func (UnimplementedAwsClustersServer) ListAwsNodePools(context.Context, *ListAwsNodePoolsRequest) (*ListAwsNodePoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAwsNodePools not implemented")
}
func (UnimplementedAwsClustersServer) DeleteAwsNodePool(context.Context, *DeleteAwsNodePoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAwsNodePool not implemented")
}
func (UnimplementedAwsClustersServer) GetAwsServerConfig(context.Context, *GetAwsServerConfigRequest) (*AwsServerConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAwsServerConfig not implemented")
}
func (UnimplementedAwsClustersServer) mustEmbedUnimplementedAwsClustersServer() {}

// UnsafeAwsClustersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwsClustersServer will
// result in compilation errors.
type UnsafeAwsClustersServer interface {
	mustEmbedUnimplementedAwsClustersServer()
}

func RegisterAwsClustersServer(s grpc.ServiceRegistrar, srv AwsClustersServer) {
	s.RegisterService(&AwsClusters_ServiceDesc, srv)
}

func _AwsClusters_CreateAwsCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAwsClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).CreateAwsCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/CreateAwsCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).CreateAwsCluster(ctx, req.(*CreateAwsClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_UpdateAwsCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAwsClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).UpdateAwsCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/UpdateAwsCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).UpdateAwsCluster(ctx, req.(*UpdateAwsClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_GetAwsCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).GetAwsCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/GetAwsCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).GetAwsCluster(ctx, req.(*GetAwsClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_ListAwsClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAwsClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).ListAwsClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/ListAwsClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).ListAwsClusters(ctx, req.(*ListAwsClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_DeleteAwsCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAwsClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).DeleteAwsCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/DeleteAwsCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).DeleteAwsCluster(ctx, req.(*DeleteAwsClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_GenerateAwsAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAwsAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).GenerateAwsAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/GenerateAwsAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).GenerateAwsAccessToken(ctx, req.(*GenerateAwsAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_CreateAwsNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAwsNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).CreateAwsNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/CreateAwsNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).CreateAwsNodePool(ctx, req.(*CreateAwsNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_UpdateAwsNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAwsNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).UpdateAwsNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/UpdateAwsNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).UpdateAwsNodePool(ctx, req.(*UpdateAwsNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_GetAwsNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).GetAwsNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/GetAwsNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).GetAwsNodePool(ctx, req.(*GetAwsNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_ListAwsNodePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAwsNodePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).ListAwsNodePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/ListAwsNodePools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).ListAwsNodePools(ctx, req.(*ListAwsNodePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_DeleteAwsNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAwsNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).DeleteAwsNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/DeleteAwsNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).DeleteAwsNodePool(ctx, req.(*DeleteAwsNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsClusters_GetAwsServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAwsServerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsClustersServer).GetAwsServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.gkemulticloud.v1.AwsClusters/GetAwsServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsClustersServer).GetAwsServerConfig(ctx, req.(*GetAwsServerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AwsClusters_ServiceDesc is the grpc.ServiceDesc for AwsClusters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwsClusters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.gkemulticloud.v1.AwsClusters",
	HandlerType: (*AwsClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAwsCluster",
			Handler:    _AwsClusters_CreateAwsCluster_Handler,
		},
		{
			MethodName: "UpdateAwsCluster",
			Handler:    _AwsClusters_UpdateAwsCluster_Handler,
		},
		{
			MethodName: "GetAwsCluster",
			Handler:    _AwsClusters_GetAwsCluster_Handler,
		},
		{
			MethodName: "ListAwsClusters",
			Handler:    _AwsClusters_ListAwsClusters_Handler,
		},
		{
			MethodName: "DeleteAwsCluster",
			Handler:    _AwsClusters_DeleteAwsCluster_Handler,
		},
		{
			MethodName: "GenerateAwsAccessToken",
			Handler:    _AwsClusters_GenerateAwsAccessToken_Handler,
		},
		{
			MethodName: "CreateAwsNodePool",
			Handler:    _AwsClusters_CreateAwsNodePool_Handler,
		},
		{
			MethodName: "UpdateAwsNodePool",
			Handler:    _AwsClusters_UpdateAwsNodePool_Handler,
		},
		{
			MethodName: "GetAwsNodePool",
			Handler:    _AwsClusters_GetAwsNodePool_Handler,
		},
		{
			MethodName: "ListAwsNodePools",
			Handler:    _AwsClusters_ListAwsNodePools_Handler,
		},
		{
			MethodName: "DeleteAwsNodePool",
			Handler:    _AwsClusters_DeleteAwsNodePool_Handler,
		},
		{
			MethodName: "GetAwsServerConfig",
			Handler:    _AwsClusters_GetAwsServerConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/gkemulticloud/v1/aws_service.proto",
}
