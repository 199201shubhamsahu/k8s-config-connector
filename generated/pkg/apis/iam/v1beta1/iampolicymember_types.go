// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type IampolicymemberCondition struct {
	/*  */
	Description string `json:"description,omitempty"`
	/*  */
	Expression string `json:"expression,omitempty"`
	/*  */
	Title string `json:"title,omitempty"`
}

type MemberFrom struct {
	/* Immutable. The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role. */
	LogSinkRef v1alpha1.ResourceRef `json:"logSinkRef,omitempty"`
	/* Immutable. The IAMServiceAccount to be bound to the role. */
	ServiceAccountRef v1alpha1.ResourceRef `json:"serviceAccountRef,omitempty"`
}

type IAMPolicyMemberSpec struct {
	/* Immutable. Optional. The condition under which the binding applies. */
	Condition IampolicymemberCondition `json:"condition,omitempty"`
	/* Immutable. The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used. */
	Member string `json:"member,omitempty"`
	/* Immutable. The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used, and only one subfield within 'memberFrom' can be used. */
	MemberFrom MemberFrom `json:"memberFrom,omitempty"`
	/* Immutable. Required. The GCP resource to set the IAM policy on. */
	ResourceRef v1alpha1.ResourceRef `json:"resourceRef,omitempty"`
	/* Immutable. Required. The role for which the Member will be bound. */
	Role string `json:"role,omitempty"`
}

type IAMPolicyMemberStatus struct {
	/* Conditions represents the latest available observations of the
	   IAMPolicyMember's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// IAMPolicyMember is the Schema for the iam API
// +k8s:openapi-gen=true
type IAMPolicyMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   IAMPolicyMemberSpec   `json:"spec,omitempty"`
	Status IAMPolicyMemberStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// IAMPolicyMemberList contains a list of IAMPolicyMember
type IAMPolicyMemberList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []IAMPolicyMember `json:"items"`
}

func init() {
	SchemeBuilder.Register(&IAMPolicyMember{}, &IAMPolicyMemberList{})
}
