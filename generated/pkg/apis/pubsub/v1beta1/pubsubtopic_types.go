// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type MessageStoragePolicy struct {
	/* A list of IDs of GCP regions where messages that are published to
	the topic may be persisted in storage. Messages published by
	publishers running in non-allowed GCP regions (or running outside
	of GCP altogether) will be routed for storage in one of the
	allowed regions. An empty list means that no regions are allowed,
	and is not a valid configuration. */
	AllowedPersistenceRegions []string `json:"allowedPersistenceRegions,omitempty"`
}

type PubSubTopicSpec struct {
	/* The KMSCryptoKey to be used to protect access to messages published
	on this topic. Your project's Pub/Sub service account
	('service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com')
	must have 'roles/cloudkms.cryptoKeyEncrypterDecrypter' to use this
	feature. */
	KmsKeyRef v1alpha1.ResourceRef `json:"kmsKeyRef,omitempty"`
	/* Policy constraining the set of Google Cloud Platform regions where
	messages published to the topic may be stored. If not present, then no
	constraints are in effect. */
	MessageStoragePolicy MessageStoragePolicy `json:"messageStoragePolicy,omitempty"`
	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
}

type PubSubTopicStatus struct {
	/* Conditions represents the latest available observations of the
	   PubSubTopic's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// PubSubTopic is the Schema for the pubsub API
// +k8s:openapi-gen=true
type PubSubTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   PubSubTopicSpec   `json:"spec,omitempty"`
	Status PubSubTopicStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// PubSubTopicList contains a list of PubSubTopic
type PubSubTopicList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []PubSubTopic `json:"items"`
}

func init() {
	SchemeBuilder.Register(&PubSubTopic{}, &PubSubTopicList{})
}
