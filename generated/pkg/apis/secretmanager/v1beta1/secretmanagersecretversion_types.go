// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type SecretData struct {
	/* Value of the field. Cannot be used if 'valueFrom' is specified. */
	Value string `json:"value,omitempty"`
	/* Source for the field's value. Cannot be used if 'value' is specified. */
	ValueFrom ValueFrom `json:"valueFrom,omitempty"`
}

type ValueFrom struct {
	/* Reference to a value with the given key in the given Secret in the resource's namespace. */
	SecretKeyRef v1alpha1.ResourceRef `json:"secretKeyRef,omitempty"`
}

type SecretManagerSecretVersionSpec struct {
	/* The current state of the SecretVersion. */
	Enabled bool `json:"enabled,omitempty"`
	/* Immutable. The secret data. Must be no larger than 64KiB. */
	SecretData SecretData `json:"secretData,omitempty"`
	/* Secret Manager secret resource */
	SecretRef v1alpha1.ResourceRef `json:"secretRef,omitempty"`
}

type SecretManagerSecretVersionStatus struct {
	/* Conditions represents the latest available observations of the
	   SecretManagerSecretVersion's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The time at which the Secret was created. */
	CreateTime string `json:"createTime,omitempty"`
	/* The time at which the Secret was destroyed. Only present if state is DESTROYED. */
	DestroyTime string `json:"destroyTime,omitempty"`
	/* The resource name of the SecretVersion. Format:
	'projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}' */
	Name string `json:"name,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SecretManagerSecretVersion is the Schema for the secretmanager API
// +k8s:openapi-gen=true
type SecretManagerSecretVersion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   SecretManagerSecretVersionSpec   `json:"spec,omitempty"`
	Status SecretManagerSecretVersionStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SecretManagerSecretVersionList contains a list of SecretManagerSecretVersion
type SecretManagerSecretVersionList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []SecretManagerSecretVersion `json:"items"`
}

func init() {
	SchemeBuilder.Register(&SecretManagerSecretVersion{}, &SecretManagerSecretVersionList{})
}
