// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Resources struct {
	/*  */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef,omitempty"`
}

type Spec struct {
	/*  */
	AccessLevels []v1alpha1.ResourceRef `json:"accessLevels,omitempty"`
	/*  */
	Resources []Resources `json:"resources,omitempty"`
	/* GCP services that are subject to the Service Perimeter
	restrictions. Must contain a list of services. For example, if
	'storage.googleapis.com' is specified, access to the storage
	buckets inside the perimeter must meet the perimeter's access
	restrictions. */
	RestrictedServices []string `json:"restrictedServices,omitempty"`
	/* Specifies how APIs are allowed to communicate within the Service
	Perimeter. */
	VpcAccessibleServices VpcAccessibleServices `json:"vpcAccessibleServices,omitempty"`
}

type Status struct {
	/*  */
	AccessLevels []v1alpha1.ResourceRef `json:"accessLevels,omitempty"`
	/*  */
	Resources []Resources `json:"resources,omitempty"`
	/* GCP services that are subject to the Service Perimeter
	restrictions. Must contain a list of services. For example, if
	'storage.googleapis.com' is specified, access to the storage
	buckets inside the perimeter must meet the perimeter's access
	restrictions. */
	RestrictedServices []string `json:"restrictedServices,omitempty"`
	/* Specifies how APIs are allowed to communicate within the Service
	Perimeter. */
	VpcAccessibleServices VpcAccessibleServices `json:"vpcAccessibleServices,omitempty"`
}

type VpcAccessibleServices struct {
	/* The list of APIs usable within the Service Perimeter.
	Must be empty unless 'enableRestriction' is True. */
	AllowedServices []string `json:"allowedServices,omitempty"`
	/* Whether to restrict API calls within the Service Perimeter to the
	list of APIs specified in 'allowedServices'. */
	EnableRestriction bool `json:"enableRestriction,omitempty"`
}

type AccessContextManagerServicePerimeterSpec struct {
	/* The AccessContextManagerAccessPolicy this
	AccessContextManagerServicePerimeter lives in. */
	AccessPolicyRef v1alpha1.ResourceRef `json:"accessPolicyRef,omitempty"`
	/* Description of the ServicePerimeter and its use. Does not affect
	behavior. */
	Description string `json:"description,omitempty"`
	/* Immutable. Specifies the type of the Perimeter. There are two types: regular and
	bridge. Regular Service Perimeter contains resources, access levels,
	and restricted services. Every resource can be in at most
	ONE regular Service Perimeter.

	In addition to being in a regular service perimeter, a resource can also
	be in zero or more perimeter bridges. A perimeter bridge only contains
	resources. Cross project operations are permitted if all effected
	resources share some perimeter (whether bridge or regular). Perimeter
	Bridge does not contain access levels or services: those are governed
	entirely by the regular perimeter that resource is in.

	Perimeter Bridges are typically useful when building more complex
	topologies with many independent perimeters that need to share some data
	with a common perimeter, but should not be able to share data among
	themselves. Default value: "PERIMETER_TYPE_REGULAR" Possible values: ["PERIMETER_TYPE_REGULAR", "PERIMETER_TYPE_BRIDGE"] */
	PerimeterType string `json:"perimeterType,omitempty"`
	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	ResourceID string `json:"resourceID,omitempty"`
	/* Proposed (or dry run) ServicePerimeter configuration.
	This configuration allows to specify and test ServicePerimeter configuration
	without enforcing actual access restrictions. Only allowed to be set when
	the 'useExplicitDryRunSpec' flag is set. */
	Spec Spec `json:"spec,omitempty"`
	/* ServicePerimeter configuration. Specifies sets of resources,
	restricted services and access levels that determine
	perimeter content and boundaries. */
	Status Status `json:"status,omitempty"`
	/* Human readable title. Must be unique within the Policy. */
	Title string `json:"title,omitempty"`
	/* Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
	for all Service Perimeters, and that spec is identical to the status for those
	Service Perimeters. When this flag is set, it inhibits the generation of the
	implicit spec, thereby allowing the user to explicitly provide a
	configuration ("spec") to use in a dry-run version of the Service Perimeter.
	This allows the user to test changes to the enforced config ("status") without
	actually enforcing them. This testing is done through analyzing the differences
	between currently enforced and suggested restrictions. useExplicitDryRunSpec must
	bet set to True if any of the fields in the spec are set to non-default values. */
	UseExplicitDryRunSpec bool `json:"useExplicitDryRunSpec,omitempty"`
}

type AccessContextManagerServicePerimeterStatus struct {
	/* Conditions represents the latest available observations of the
	   AccessContextManagerServicePerimeter's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Time the AccessPolicy was created in UTC. */
	CreateTime string `json:"createTime,omitempty"`
	/* Time the AccessPolicy was updated in UTC. */
	UpdateTime string `json:"updateTime,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// AccessContextManagerServicePerimeter is the Schema for the accesscontextmanager API
// +k8s:openapi-gen=true
type AccessContextManagerServicePerimeter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   AccessContextManagerServicePerimeterSpec   `json:"spec,omitempty"`
	Status AccessContextManagerServicePerimeterStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// AccessContextManagerServicePerimeterList contains a list of AccessContextManagerServicePerimeter
type AccessContextManagerServicePerimeterList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []AccessContextManagerServicePerimeter `json:"items"`
}

func init() {
	SchemeBuilder.Register(&AccessContextManagerServicePerimeter{}, &AccessContextManagerServicePerimeterList{})
}
