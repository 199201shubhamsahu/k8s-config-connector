// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Autoscaling struct {
	/* Maximum number of nodes in the NodePool. Must be >= min_node_count. */
	MaxNodeCount int `json:"maxNodeCount,omitempty"`
	/* Minimum number of nodes in the NodePool. Must be >=0 and <= max_node_count. */
	MinNodeCount int `json:"minNodeCount,omitempty"`
}

type ContainernodepoolGuestAccelerator struct {
	/* Immutable. */
	Count int `json:"count,omitempty"`
	/* Immutable. */
	Type string `json:"type,omitempty"`
}

type ContainernodepoolKubeletConfig struct {
	/*  */
	CpuCfsQuota bool `json:"cpuCfsQuota,omitempty"`
	/*  */
	CpuCfsQuotaPeriod string `json:"cpuCfsQuotaPeriod,omitempty"`
	/*  */
	CpuManagerPolicy string `json:"cpuManagerPolicy,omitempty"`
}

type ContainernodepoolLinuxNodeConfig struct {
	/*  */
	Sysctls map[string]string `json:"sysctls,omitempty"`
}

type ContainernodepoolNodeConfig struct {
	/*  */
	BootDiskKMSCryptoKeyRef v1alpha1.ResourceRef `json:"bootDiskKMSCryptoKeyRef,omitempty"`
	/* Immutable. */
	DiskSizeGb int `json:"diskSizeGb,omitempty"`
	/* Immutable. */
	DiskType string `json:"diskType,omitempty"`
	/* Immutable. */
	GuestAccelerator ContainernodepoolGuestAccelerator `json:"guestAccelerator,omitempty"`
	/*  */
	ImageType string `json:"imageType,omitempty"`
	/*  */
	KubeletConfig ContainernodepoolKubeletConfig `json:"kubeletConfig,omitempty"`
	/* Immutable. */
	Labels map[string]string `json:"labels,omitempty"`
	/*  */
	LinuxNodeConfig ContainernodepoolLinuxNodeConfig `json:"linuxNodeConfig,omitempty"`
	/* Immutable. */
	LocalSsdCount int `json:"localSsdCount,omitempty"`
	/* Immutable. */
	MachineType string `json:"machineType,omitempty"`
	/* Immutable. */
	Metadata map[string]string `json:"metadata,omitempty"`
	/* Immutable. */
	MinCpuPlatform string `json:"minCpuPlatform,omitempty"`
	/* Immutable. */
	OauthScopes []string `json:"oauthScopes,omitempty"`
	/* Immutable. */
	Preemptible bool `json:"preemptible,omitempty"`
	/* Immutable. */
	SandboxConfig ContainernodepoolSandboxConfig `json:"sandboxConfig,omitempty"`
	/*  */
	ServiceAccountRef v1alpha1.ResourceRef `json:"serviceAccountRef,omitempty"`
	/* Immutable. */
	ShieldedInstanceConfig ContainernodepoolShieldedInstanceConfig `json:"shieldedInstanceConfig,omitempty"`
	/* Immutable. */
	Tags []string `json:"tags,omitempty"`
	/* Immutable. */
	Taint ContainernodepoolTaint `json:"taint,omitempty"`
	/*  */
	WorkloadMetadataConfig ContainernodepoolWorkloadMetadataConfig `json:"workloadMetadataConfig,omitempty"`
}

type ContainernodepoolSandboxConfig struct {
	/*  */
	SandboxType string `json:"sandboxType,omitempty"`
}

type ContainernodepoolShieldedInstanceConfig struct {
	/* Immutable. */
	EnableIntegrityMonitoring bool `json:"enableIntegrityMonitoring,omitempty"`
	/* Immutable. */
	EnableSecureBoot bool `json:"enableSecureBoot,omitempty"`
}

type ContainernodepoolTaint struct {
	/* Immutable. */
	Effect string `json:"effect,omitempty"`
	/* Immutable. */
	Key string `json:"key,omitempty"`
	/* Immutable. */
	Value string `json:"value,omitempty"`
}

type ContainernodepoolWorkloadMetadataConfig struct {
	/*  */
	NodeMetadata string `json:"nodeMetadata,omitempty"`
}

type Management struct {
	/* Whether the nodes will be automatically repaired. */
	AutoRepair bool `json:"autoRepair,omitempty"`
	/* Whether the nodes will be automatically upgraded. */
	AutoUpgrade bool `json:"autoUpgrade,omitempty"`
}

type UpgradeSettings struct {
	/* The number of additional nodes that can be added to the node pool during an upgrade. Increasing max_surge raises the number of nodes that can be upgraded simultaneously. Can be set to 0 or greater. */
	MaxSurge int `json:"maxSurge,omitempty"`
	/* The number of nodes that can be simultaneously unavailable during an upgrade. Increasing max_unavailable raises the number of nodes that can be upgraded in parallel. Can be set to 0 or greater. */
	MaxUnavailable int `json:"maxUnavailable,omitempty"`
}

type ContainerNodePoolSpec struct {
	/* Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage. */
	Autoscaling Autoscaling `json:"autoscaling,omitempty"`
	/*  */
	ClusterRef v1alpha1.ResourceRef `json:"clusterRef,omitempty"`
	/* Immutable. The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone. Changing this will force recreation of the resource. */
	InitialNodeCount int `json:"initialNodeCount,omitempty"`
	/* Immutable. The location (region or zone) of the cluster. */
	Location string `json:"location,omitempty"`
	/* Node management configuration, wherein auto-repair and auto-upgrade is configured. */
	Management Management `json:"management,omitempty"`
	/* Immutable. The maximum number of pods per node in this node pool. Note that this does not work on node pools which are "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled. */
	MaxPodsPerNode int `json:"maxPodsPerNode,omitempty"`
	/* Immutable. Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name. */
	NamePrefix string `json:"namePrefix,omitempty"`
	/* Immutable. */
	NodeConfig ContainernodepoolNodeConfig `json:"nodeConfig,omitempty"`
	/* The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling. */
	NodeCount int `json:"nodeCount,omitempty"`
	/* The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level node_locations will be used. */
	NodeLocations []string `json:"nodeLocations,omitempty"`
	/* Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20. */
	UpgradeSettings UpgradeSettings `json:"upgradeSettings,omitempty"`
	/*  */
	Version string `json:"version,omitempty"`
}

type ContainerNodePoolStatus struct {
	/* Conditions represents the latest available observations of the
	   ContainerNodePool's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The resource URLs of the managed instance groups associated with this node pool. */
	InstanceGroupUrls []string `json:"instanceGroupUrls,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ContainerNodePool is the Schema for the container API
// +k8s:openapi-gen=true
type ContainerNodePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ContainerNodePoolSpec   `json:"spec,omitempty"`
	Status ContainerNodePoolStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ContainerNodePoolList contains a list of ContainerNodePool
type ContainerNodePoolList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []ContainerNodePool `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ContainerNodePool{}, &ContainerNodePoolList{})
}
