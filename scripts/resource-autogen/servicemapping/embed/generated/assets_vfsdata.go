// Code generated by vfsgen; DO NOT EDIT.

//go:build !integration
// +build !integration

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/datacatalog.yaml": &vfsgen۰CompressedFileInfo{
			name:             "datacatalog.yaml",
			modTime:          time.Time{},
			uncompressedSize: 5707,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4f\x6f\xe2\xc8\x13\xbd\xfb\x53\x94\xe0\xf2\xfb\x49\x09\x24\x39\x7a\x4f\x0c\xc9\x64\xac\x4d\xc8\x08\xc8\x8e\xe6\x84\x8a\x76\x61\xf7\xc6\xee\xee\xed\x2e\x43\x10\xcb\x77\x5f\xf9\x0f\x60\x02\x21\x64\x32\xda\x5d\xad\xf0\x29\xe9\xae\x7e\x55\xf5\xba\xde\x6b\x89\x26\x74\xb5\x99\x5b\x19\xc5\x0c\x57\x17\x57\x57\x70\xab\x75\x94\x10\xdc\xdd\x75\xbd\xa6\xd7\x84\x3b\x29\x48\x39\x0a\x21\x53\x21\x59\xe0\x98\xa0\x63\x50\xc4\xb4\xda\x39\x83\xdf\xc8\x3a\xa9\x15\x5c\xb5\x2e\xe0\x7f\x79\x40\xa3\xda\x6a\xfc\xff\x17\xaf\x09\x73\x9d\x41\x8a\x73\x50\x9a\x21\x73\x04\x1c\x4b\x07\x13\x99\x10\xd0\xb3\x20\xc3\x20\x15\x08\x9d\x9a\x44\xa2\x12\x04\x33\xc9\x71\x91\xa6\x02\x69\x79\x4d\xf8\x5e\x41\xe8\x31\xa3\x54\x80\x20\xb4\x99\x83\x9e\xd4\xe3\x00\xb9\x28\xb8\xf8\x62\x66\xe3\xb7\xdb\xb3\xd9\xac\x85\x45\xb5\x2d\x6d\xa3\x76\x52\x46\xba\xf6\x5d\xd0\xbd\xe9\x0d\x6e\xce\xaf\x5a\x17\xc5\x99\x47\x95\x90\x73\x60\xe9\x8f\x4c\x5a\x0a\x61\x3c\x07\x34\x26\x91\x02\xc7\x09\x41\x82\x33\xd0\x16\x30\xb2\x44\x21\xb0\xce\x0b\x9e\x59\xc9\x52\x45\x67\xe0\xf4\x84\x67\x68\xc9\x6b\x42\x28\x1d\x5b\x39\xce\x78\x8b\xad\x55\x79\xd2\x6d\x05\x68\x05\xa8\xa0\xd1\x19\x40\x30\x68\xc0\xa7\xce\x20\x18\x9c\x79\x4d\xf8\x16\x0c\xbf\x3c\x3c\x0e\xe1\x5b\xa7\xdf\xef\xf4\x86\xc1\xcd\x00\x1e\xfa\xd0\x7d\xe8\x5d\x07\xc3\xe0\xa1\x37\x80\x87\xcf\xd0\xe9\x7d\x87\x5f\x83\xde\xf5\x19\x90\xe4\x98\x2c\xd0\xb3\xb1\x79\xfd\xda\x82\xcc\x79\xa4\x30\x27\x6d\x40\xb4\x55\xc0\x44\x97\x05\x39\x43\x42\x4e\xa4\x80\x04\x55\x94\x61\x44\x10\xe9\x29\x59\x25\x55\x04\x86\x6c\x2a\x5d\x7e\x9b\x0e\x50\x85\x5e\x13\x12\x99\x4a\x46\x2e\x56\x76\x9a\x6a\x79\x1e\x1a\x59\xdd\xbf\x0f\x42\x5b\x6a\x09\x65\xd3\x96\x48\x74\x16\xb6\xa2\x62\x94\x5a\x42\xa7\xed\xe9\x25\x26\x26\xc6\x4b\xef\x49\xaa\xd0\x87\x01\xd9\xa9\x14\x74\x8f\xc6\x48\x15\x79\x29\x31\x86\xc8\xe8\x7b\x00\x0a\x53\xf2\x21\xff\x4f\x20\x63\xa2\xa3\xfd\x88\x55\xa4\x33\x28\xc8\x87\x3c\xe4\xdc\xcd\x1d\x53\xea\xe5\xfd\x6d\x80\xae\x91\xb1\x5b\x02\x79\x00\xd3\x55\xa9\xd3\xcb\x31\x31\x5e\x7a\x00\xae\x2c\xe5\x8b\x76\xdc\xdb\x49\x5d\xe6\x43\x23\x5d\x95\xd3\x92\xd3\x99\x15\xe4\xf2\x0c\x00\xe7\x55\x96\x32\x6e\x94\x1f\x1d\x55\x67\x47\xa4\xd8\xce\x47\x91\xd5\x99\xf1\xca\xa9\x2c\x7b\xaf\x55\x74\x93\x87\xdc\xd6\x22\x30\x63\x7d\x4b\x8a\x2c\x32\x85\x3e\xb0\xcd\xa8\xda\x91\x98\x76\xb5\x9a\xc8\xc8\xaf\x16\x00\x8c\x4e\xa4\x98\xf7\x8e\x29\x60\x24\x31\x1d\x95\xf1\x2f\x8e\xdf\x53\x3a\x26\x7b\x3c\x48\x5a\xc4\xaf\x41\x2c\x4d\xc8\x92\x12\xf4\x59\x52\x12\x6e\x6a\x5b\xd1\xbf\x4b\x42\xfe\xf1\xdc\x90\x0f\x32\x5c\x2f\xb9\xcc\x18\x6d\xd9\x75\xb5\x0a\x65\x31\x6c\x3e\x4c\x30\x71\xeb\xee\xc3\x21\xa5\x26\x41\x26\x1f\x1a\x8b\x45\x8e\xbd\x5c\x36\x76\x36\xbb\xa8\x3e\xd1\xa3\xa3\x70\xa8\xef\x91\x45\xdc\xaf\x6e\xab\x6c\xaf\x0e\xb8\xba\xc7\xce\x14\x65\x92\xab\x3c\x50\x1d\xe7\x88\x03\x35\x25\xc5\xda\xce\xb7\xc3\xf3\x21\x21\xbb\xbe\x99\xe0\xba\x6c\xb7\x68\xf2\x05\x62\x70\xbd\x61\x81\xd1\x46\xc4\xbb\xb1\x00\x53\x4c\x32\xaa\xf5\x64\xac\xfe\x9d\x04\xbb\xf6\x62\x51\xfd\xb9\x5c\xb6\x13\x2d\x4a\xe5\xb5\x17\x0b\x4b\x91\xd4\x6a\xb9\x6c\xd3\x7a\x66\xf2\xe5\x02\x67\x43\x45\x2c\xc9\xa2\x15\xb1\x14\x98\xf4\x57\x57\xe3\x36\x05\x9d\x57\xd4\x57\x39\x6a\x57\xf2\x44\xf3\xf5\x72\x9f\x26\x2f\x9a\x7a\x05\x6b\x52\xb5\x76\x2c\x5c\xfe\x85\xe4\x84\x95\x86\x0b\x19\xfe\x79\x5e\xdb\x01\x18\xc6\xb4\x3a\x04\x1c\x23\x97\x6f\xc5\xaa\x08\x18\x53\xa2\x55\xe4\x80\x75\xab\x76\x2c\x9a\x3e\xf9\x5b\x28\xa5\xcc\xbe\xee\xd4\xb4\x57\xfe\x35\x9c\x9c\x53\x7f\x9d\x2d\x45\x85\x11\xd9\x57\xdd\xe7\x08\xf1\x1f\x94\xfd\xdb\x8a\xff\xaf\xcf\xfc\x62\x51\x73\x87\x6a\xb2\x25\xed\x4c\xf5\x21\x9a\x19\xa3\x11\x57\x88\xaf\xb1\x3d\xc4\x68\xb8\x1d\xf2\x53\x5d\xb6\x5e\xc2\x8f\xdb\xec\x0e\xca\x3b\x7d\x76\x0f\x11\x70\x32\xda\x0f\x19\x2d\x6f\xe6\xe6\xe4\xb4\xc5\xf7\xaf\x74\x5a\xc6\xe8\x80\xf2\x4f\x2e\xbb\x58\x18\xb4\xa4\xb8\x9c\xe8\x77\xba\xeb\xb3\x56\x3a\x7d\xf5\x1d\x1b\x6e\xef\xff\x64\x5b\x2d\xb1\x3f\x62\xa9\x35\x84\x77\xdb\xe9\x56\x67\x70\xb2\xd2\x0f\x5a\x69\x41\xe7\x9e\xc7\xfd\x64\xa4\x35\x69\xfd\xb3\x46\x5a\xaa\xea\x90\x9f\x7e\x2d\x22\x8e\x72\xd5\xf7\x0b\x7e\x93\xfe\xc7\x25\xff\x02\xe3\x9d\xa2\xdf\x21\x00\x4e\xb2\xdf\xfb\xa0\xac\xdc\x71\xb9\x6c\x9b\xd5\x48\xec\x51\xf6\x61\x25\x96\x72\x2b\x9e\xa6\xf5\x5c\x6d\xcb\x6e\xa3\xd5\x22\x6a\x77\x40\x0f\x48\xe9\xc0\xd4\x1e\xaf\xab\x63\x7e\x84\x7a\x9b\xbf\xaa\xd5\x15\x69\xaf\xf4\xb8\xe7\xc5\x79\xbb\xb5\xe1\xee\xa1\xbf\xb3\x33\xa8\x6e\xa6\x92\xfe\x5f\x01\x00\x00\xff\xff\xe8\x37\xf0\xea\x4b\x16\x00\x00"),
		},
		"/tags.yaml": &vfsgen۰CompressedFileInfo{
			name:             "tags.yaml",
			modTime:          time.Time{},
			uncompressedSize: 2465,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xcd\x6e\xdb\x3a\x13\xdd\xeb\x29\x06\xf6\xe6\xfb\x80\x44\x4e\xbc\xd4\x5d\x39\x4e\xda\x0a\x4d\x6c\xc0\x76\x5a\x74\x15\x8c\xa9\x91\x3c\x88\x44\xf2\x92\x23\xb9\x42\xd1\x77\xbf\xd0\x8f\x6d\x39\x4d\x5a\xa0\xe8\xa6\x5a\x78\xc1\x39\xf3\x73\xe6\x1c\xd2\x63\x98\x1b\x5b\x3b\xce\x76\x02\xd3\xab\xe9\x14\xde\x1b\x93\xe5\x04\xf7\xf7\xf3\x60\x1c\x8c\xe1\x9e\x15\x69\x4f\x09\x94\x3a\x21\x07\xb2\x23\x98\x59\x54\x3b\x3a\x44\x2e\xe0\x13\x39\xcf\x46\xc3\x34\xbc\x82\xff\x35\x80\x51\x1f\x1a\xfd\xff\x9f\x60\x0c\xb5\x29\xa1\xc0\x1a\xb4\x11\x28\x3d\x81\xec\xd8\x43\xca\x39\x01\x7d\x55\x64\x05\x58\x83\x32\x85\xcd\x19\xb5\x22\xd8\xb3\xec\xda\x36\x7d\x91\x30\x18\xc3\x97\xbe\x84\xd9\x0a\xb2\x06\x04\x65\x6c\x0d\x26\x1d\xe2\x00\xa5\x1d\xb8\xfd\x76\x22\x36\x9a\x4c\xf6\xfb\x7d\x88\xed\xb4\xa1\x71\xd9\x24\xef\x90\x7e\x72\x1f\xcf\xef\x16\xeb\xbb\xcb\x69\x78\xd5\xe6\x3c\xea\x9c\xbc\x07\x47\xff\x96\xec\x28\x81\x6d\x0d\x68\x6d\xce\x0a\xb7\x39\x41\x8e\x7b\x30\x0e\x30\x73\x44\x09\x88\x69\x06\xde\x3b\x16\xd6\xd9\x05\x78\x93\xca\x1e\x1d\x05\x63\x48\xd8\x8b\xe3\x6d\x29\x67\xdb\x3a\x8c\xc7\xfe\x0c\x60\x34\xa0\x86\xd1\x6c\x0d\xf1\x7a\x04\x37\xb3\x75\xbc\xbe\x08\xc6\xf0\x39\xde\x7c\x58\x3e\x6e\xe0\xf3\x6c\xb5\x9a\x2d\x36\xf1\xdd\x1a\x96\x2b\x98\x2f\x17\xb7\xf1\x26\x5e\x2e\xd6\xb0\x7c\x07\xb3\xc5\x17\xf8\x18\x2f\x6e\x2f\x80\x58\x76\xe4\x80\xbe\x5a\xd7\xcc\x6f\x1c\x70\xb3\x47\x4a\x9a\xa5\xad\x89\xce\x06\x48\x4d\x37\x90\xb7\xa4\x38\x65\x05\x39\xea\xac\xc4\x8c\x20\x33\x15\x39\xcd\x3a\x03\x4b\xae\x60\xdf\xa8\xe9\x01\x75\x12\x8c\x21\xe7\x82\x05\xa5\x3d\xf9\x81\x54\x18\x04\x68\xb9\xd7\x3f\x02\x65\x1c\x85\x4a\xbb\x22\x54\xb9\x29\x93\x30\x6b\xad\x14\x2a\x53\x4c\xaa\x6b\xcc\xed\x0e\xaf\x83\x67\xd6\x49\x04\x6b\x72\x15\x2b\x7a\x40\x6b\x59\x67\x41\x41\x82\x09\x0a\x46\x01\x80\xc6\x82\x22\x10\xcc\xfc\xeb\xa5\x7a\x88\xb7\xa8\x28\x82\x06\x72\xe9\x6b\x2f\x54\x04\x0d\xb1\x53\x85\x0d\x66\x3e\x00\xa8\x0e\xc3\x55\xd7\x5b\x12\xbc\x0e\x00\x7c\xd7\xfc\x83\xf1\xb2\x38\x35\xeb\x3a\xa0\x65\xdf\x77\x71\xe4\x4d\xe9\x14\xf9\xa6\x26\xc0\x65\x5f\xb7\xc3\x3d\x35\x39\xcd\xcf\xd3\x33\xd5\x41\x67\xba\x8e\x5a\xd3\x77\x83\xd9\xc7\xe3\x31\x96\x62\xde\x93\x26\x87\x42\x49\x04\xe2\x4a\xea\x23\x8c\xc5\xdc\xe8\x94\xb3\xa8\x3f\x00\xb0\x26\x67\x55\x2f\xde\xea\xf4\xc4\x58\x3c\x75\x98\x17\x29\x0f\x54\x6c\xc9\xfd\x3c\xb1\x68\x31\xc7\x44\x47\x29\x39\xd2\x8a\xde\x31\xe5\xc9\x69\x86\x81\x06\x03\x76\xcd\x27\xb5\xa5\xa8\x8d\x1e\x0f\x7d\x69\xad\x71\xe2\xe7\x46\x27\xdc\xda\x24\x82\x14\x73\x7f\xe4\x98\x6c\xa8\xb0\x39\x0a\x45\x30\x92\x76\x2f\x7e\xf2\xed\x5b\x53\xe3\xfb\xf7\xd1\x0f\xa0\x39\xea\x1b\x7a\xf4\x94\x6c\xcc\x03\x8a\xda\xad\x7a\x11\x3a\x62\xc3\xc2\x07\x79\x66\x15\x72\xde\xdc\xd3\x58\xcf\xbc\x27\x89\x75\x45\x5a\x8c\xab\xcf\xe1\x8d\xe8\xe4\x8e\x3a\xc4\xb7\x1d\xe9\x21\x99\x43\xc5\xf8\xf6\xb4\x0b\x41\x97\x91\xbc\xc4\xbe\xe5\x85\x0a\xf3\xa3\xb8\x67\x6e\xf8\x34\x08\xfc\x31\x3f\xb4\xdd\x7e\xcf\x11\xa7\xd4\xdf\xf0\xc4\x90\xe5\x1f\x72\x45\xbb\x9f\xbf\xdf\x17\x27\xec\xea\xb0\x47\x7f\xca\xb9\x84\x67\xaa\x23\xb0\xe8\x48\xcb\x8a\xd2\xe1\x0a\xd3\xbe\x54\x17\x1c\x44\xb2\xea\x79\xa8\xc2\x9b\xaf\x4c\xf7\xbd\xf2\xda\x0d\x4a\x39\x53\xda\x5f\x3c\xad\xbf\xe2\xd7\x36\x69\xc4\x7a\xf5\x56\xb7\x91\x93\x7c\xad\x17\x5b\x42\x03\x9b\xbf\x75\x77\xb6\xac\x93\xe6\xbf\xe0\x15\x96\x37\x67\xa1\x9f\xdc\x9f\x17\xae\xea\xf3\xfe\x6e\x5f\xfd\x17\x00\x00\xff\xff\x9e\x01\x05\xd0\xa1\x09\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/datacatalog.yaml"].(os.FileInfo),
		fs["/tags.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
