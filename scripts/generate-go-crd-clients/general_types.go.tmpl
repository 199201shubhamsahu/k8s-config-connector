// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package {{.Version}}

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

{{define "StructField"}}
  /* {{$.Description}} */
  {{ if $.Optional}}// +optional
  {{ end -}}
  {{ if $.UsePointer}}
    {{- $.Name}} *{{$.Type}} `json:"{{$.JSONName}}"`
  {{ else }}
    {{- $.Name}} {{$.Type}} `json:"{{$.JSONName}}"`
  {{ end }}
{{- end}}

{{ range $structName, $fields := $.SpecNestedStructs }}
type {{$structName}} struct {
  {{- range $f := $fields}}
    {{- template "StructField" $f}}
  {{- end }}
}
{{ end }}

type {{$.Name}}Spec struct {
  {{- range $f := $.SpecFields}}
    {{- template "StructField" $f}}
  {{- end}}
}

{{ range $structName, $fields := $.StatusNestedStructs }}
type {{$structName}} struct {
  {{ range $f := $fields -}}
  /* {{$f.Description}} */
  {{$f.Name}} {{$f.Type}} `json:"{{$f.JSONName}}"`

  {{ end }}
}
{{ end }}

type {{$.Name}}Status struct {
  /* Conditions represent the latest available observations of the
   {{$.Name}}'s current state. */
  Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
  {{- range $f := $.StatusFields}}
    /* {{$f.Description}} */
    {{$f.Name}} {{$f.Type}} `json:"{{$f.JSONName}}"`
  {{- end}}
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// {{$.Name}} is the Schema for the {{$.Service}} API
// +k8s:openapi-gen=true
type {{$.Name}} struct {
  metav1.TypeMeta `json:",inline"`
  metav1.ObjectMeta `json:"metadata,omitempty"`

  Spec {{$.Name}}Spec `json:"spec,omitempty"`
  Status {{$.Name}}Status `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// {{$.Name}}List contains a list of {{$.Name}}
type {{$.Name}}List struct {
  metav1.TypeMeta `json:",inline"`
  metav1.ListMeta `json:"metadata,omitempty"`
  Items []{{$.Name}} `json:"items"`
}

func init() {
  SchemeBuilder.Register(&{{$.Name}}{}, &{{$.Name}}List{})
}